Specializing trait Base21...
  // interface:
  abstract trait Base21[T, S] extends Object {
    def overrideMe(t: T,s: S): T
    def overrideMe_J(val T_TypeTag: Byte,t: T @storage[Long],s: S): T @storage[Long]
  }
  // specialized class:
  abstract trait Base21_J[Tsp, Ssp] extends Base21[Tsp,Ssp] {
    def miniboxing|tests|compile|Base21_J|T_TypeTag(): Byte                // is a type tag
    def overrideMe(t: Tsp,s: Ssp): Tsp                                     // is a forwarder to the specialized member
    def overrideMe_J(val T_TypeTag: Byte,t: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a specialized implementation of method overrideMe
  }
  // specialized class:
  abstract trait Base21_L[Tsp, Ssp] extends Base21[Tsp,Ssp] {
    def overrideMe(t: Tsp,s: Ssp): Tsp                                     // is a specialized implementation of method overrideMe
    def overrideMe_J(val T_TypeTag: Byte,t: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
  }
Specializing trait Base22...
  // interface:
  abstract trait Base22[T, S] extends Object {
    def overrideMe(t: T,s: S): T
    def overrideMe_J(val T_TypeTag: Byte,t: T @storage[Long],s: S): T @storage[Long]
  }
  // specialized class:
  abstract trait Base22_J[Tsp, Ssp] extends Base22[Tsp,Ssp] {
    def miniboxing|tests|compile|Base22_J|T_TypeTag(): Byte                // is a type tag
    def overrideMe(t: Tsp,s: Ssp): Tsp                                     // is a forwarder to the specialized member
    def overrideMe_J(val T_TypeTag: Byte,t: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a specialized implementation of method overrideMe
  }
  // specialized class:
  abstract trait Base22_L[Tsp, Ssp] extends Base22[Tsp,Ssp] {
    def overrideMe(t: Tsp,s: Ssp): Tsp                                     // is a specialized implementation of method overrideMe
    def overrideMe_J(val T_TypeTag: Byte,t: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
  }
Specializing trait Base23...
  // interface:
  abstract trait Base23[T, S] extends Object {
    def overrideMe(t: T,s: S): T
    def overrideMe_JJ(val T_TypeTag: Byte,val S_TypeTag: Byte,t: T @storage[Long],s: S @storage[Long]): T @storage[Long]
    def overrideMe_JL(val T_TypeTag: Byte,t: T @storage[Long],s: S): T @storage[Long]
    def overrideMe_LJ(val S_TypeTag: Byte,t: T,s: S @storage[Long]): T
  }
  // specialized class:
  abstract trait Base23_JJ[Tsp, Ssp] extends Base23[Tsp,Ssp] {
    def miniboxing|tests|compile|Base23_JJ|S_TypeTag(): Byte               // is a type tag
    def miniboxing|tests|compile|Base23_JJ|T_TypeTag(): Byte               // is a type tag
    def overrideMe(t: Tsp,s: Ssp): Tsp                                     // is a forwarder to the specialized member
    def overrideMe_JJ(val T_TypeTag: Byte,val S_TypeTag: Byte,t: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a specialized implementation of method overrideMe
    def overrideMe_JL(val T_TypeTag: Byte,t: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
    def overrideMe_LJ(val S_TypeTag: Byte,t: Tsp,s: Ssp @storage[Long]): Tsp // is a forwarder to the specialized member
  }
  // specialized class:
  abstract trait Base23_LJ[Tsp, Ssp] extends Base23[Tsp,Ssp] {
    def miniboxing|tests|compile|Base23_LJ|S_TypeTag(): Byte               // is a type tag
    def overrideMe(t: Tsp,s: Ssp): Tsp                                     // is a forwarder to the specialized member
    def overrideMe_JJ(val T_TypeTag: Byte,val S_TypeTag: Byte,t: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a forwarder to the specialized member
    def overrideMe_JL(val T_TypeTag: Byte,t: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
    def overrideMe_LJ(val S_TypeTag: Byte,t: Tsp,s: Ssp @storage[Long]): Tsp // is a specialized implementation of method overrideMe
  }
  // specialized class:
  abstract trait Base23_JL[Tsp, Ssp] extends Base23[Tsp,Ssp] {
    def miniboxing|tests|compile|Base23_JL|T_TypeTag(): Byte               // is a type tag
    def overrideMe(t: Tsp,s: Ssp): Tsp                                     // is a forwarder to the specialized member
    def overrideMe_JJ(val T_TypeTag: Byte,val S_TypeTag: Byte,t: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a forwarder to the specialized member
    def overrideMe_JL(val T_TypeTag: Byte,t: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a specialized implementation of method overrideMe
    def overrideMe_LJ(val S_TypeTag: Byte,t: Tsp,s: Ssp @storage[Long]): Tsp // is a forwarder to the specialized member
  }
  // specialized class:
  abstract trait Base23_LL[Tsp, Ssp] extends Base23[Tsp,Ssp] {
    def overrideMe(t: Tsp,s: Ssp): Tsp                                     // is a specialized implementation of method overrideMe
    def overrideMe_JJ(val T_TypeTag: Byte,val S_TypeTag: Byte,t: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a forwarder to the specialized member
    def overrideMe_JL(val T_TypeTag: Byte,t: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
    def overrideMe_LJ(val S_TypeTag: Byte,t: Tsp,s: Ssp @storage[Long]): Tsp // is a forwarder to the specialized member
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait Base21[@miniboxed T, S] extends Object {
    def overrideMe(t: T, s: S): T;
    def overrideMe_J(T_TypeTag: Byte, t: Long, s: S): Long
  };
  abstract trait Base21_J[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base21[Tsp,Ssp] {
    def miniboxing|tests|compile|Base21_J|T_TypeTag(): Byte;
    def overrideMe(t: Tsp, s: Ssp): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base21_J.this.overrideMe_J(Base21_J.this.miniboxing|tests|compile|Base21_J|T_TypeTag(), MiniboxConversions.this.box2minibox_tt[Tsp](t, Base21_J.this.miniboxing|tests|compile|Base21_J|T_TypeTag()), s), Base21_J.this.miniboxing|tests|compile|Base21_J|T_TypeTag());
    def overrideMe_J(T_TypeTag: Byte, t: Long, s: Ssp): Long = t
  };
  abstract trait Base21_L[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base21[Tsp,Ssp] {
    def overrideMe(t: Tsp, s: Ssp): Tsp = t;
    def overrideMe_J(T_TypeTag: Byte, t: Long, s: Ssp): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base21_L.this.overrideMe(MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag), s), T_TypeTag)
  };
  abstract trait Base22[@miniboxed T, S] extends Object {
    def overrideMe(t: T, s: S): T;
    def overrideMe_J(T_TypeTag: Byte, t: Long, s: S): Long
  };
  abstract trait Base22_J[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base22[Tsp,Ssp] {
    def miniboxing|tests|compile|Base22_J|T_TypeTag(): Byte;
    def overrideMe(t: Tsp, s: Ssp): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base22_J.this.overrideMe_J(Base22_J.this.miniboxing|tests|compile|Base22_J|T_TypeTag(), MiniboxConversions.this.box2minibox_tt[Tsp](t, Base22_J.this.miniboxing|tests|compile|Base22_J|T_TypeTag()), s), Base22_J.this.miniboxing|tests|compile|Base22_J|T_TypeTag());
    def overrideMe_J(T_TypeTag: Byte, t: Long, s: Ssp): Long = t
  };
  abstract trait Base22_L[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base22[Tsp,Ssp] {
    def overrideMe(t: Tsp, s: Ssp): Tsp = t;
    def overrideMe_J(T_TypeTag: Byte, t: Long, s: Ssp): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base22_L.this.overrideMe(MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag), s), T_TypeTag)
  };
  abstract trait Base23[@miniboxed T, @miniboxed S] extends Object {
    def overrideMe(t: T, s: S): T;
    def overrideMe_JJ(T_TypeTag: Byte, S_TypeTag: Byte, t: Long, s: Long): Long;
    def overrideMe_JL(T_TypeTag: Byte, t: Long, s: S): Long;
    def overrideMe_LJ(S_TypeTag: Byte, t: T, s: Long): T
  };
  abstract trait Base23_JJ[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base23[Tsp,Ssp] {
    def miniboxing|tests|compile|Base23_JJ|S_TypeTag(): Byte;
    def miniboxing|tests|compile|Base23_JJ|T_TypeTag(): Byte;
    def overrideMe(t: Tsp, s: Ssp): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base23_JJ.this.overrideMe_JJ(Base23_JJ.this.miniboxing|tests|compile|Base23_JJ|T_TypeTag(), Base23_JJ.this.miniboxing|tests|compile|Base23_JJ|S_TypeTag(), MiniboxConversions.this.box2minibox_tt[Tsp](t, Base23_JJ.this.miniboxing|tests|compile|Base23_JJ|T_TypeTag()), MiniboxConversions.this.box2minibox_tt[Ssp](s, Base23_JJ.this.miniboxing|tests|compile|Base23_JJ|S_TypeTag())), Base23_JJ.this.miniboxing|tests|compile|Base23_JJ|T_TypeTag());
    def overrideMe_JJ(T_TypeTag: Byte, S_TypeTag: Byte, t: Long, s: Long): Long = t;
    def overrideMe_JL(T_TypeTag: Byte, t: Long, s: Ssp): Long = Base23_JJ.this.overrideMe_JJ(T_TypeTag, Base23_JJ.this.miniboxing|tests|compile|Base23_JJ|S_TypeTag(), t, MiniboxConversions.this.box2minibox_tt[Ssp](s, Base23_JJ.this.miniboxing|tests|compile|Base23_JJ|S_TypeTag()));
    def overrideMe_LJ(S_TypeTag: Byte, t: Tsp, s: Long): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base23_JJ.this.overrideMe_JJ(Base23_JJ.this.miniboxing|tests|compile|Base23_JJ|T_TypeTag(), S_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t, Base23_JJ.this.miniboxing|tests|compile|Base23_JJ|T_TypeTag()), s), Base23_JJ.this.miniboxing|tests|compile|Base23_JJ|T_TypeTag())
  };
  abstract trait Base23_JL[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base23[Tsp,Ssp] {
    def miniboxing|tests|compile|Base23_JL|T_TypeTag(): Byte;
    def overrideMe(t: Tsp, s: Ssp): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base23_JL.this.overrideMe_JL(Base23_JL.this.miniboxing|tests|compile|Base23_JL|T_TypeTag(), MiniboxConversions.this.box2minibox_tt[Tsp](t, Base23_JL.this.miniboxing|tests|compile|Base23_JL|T_TypeTag()), s), Base23_JL.this.miniboxing|tests|compile|Base23_JL|T_TypeTag());
    def overrideMe_JJ(T_TypeTag: Byte, S_TypeTag: Byte, t: Long, s: Long): Long = Base23_JL.this.overrideMe_JL(T_TypeTag, t, MiniboxConversions.this.minibox2box[Ssp](s, S_TypeTag));
    def overrideMe_JL(T_TypeTag: Byte, t: Long, s: Ssp): Long = t;
    def overrideMe_LJ(S_TypeTag: Byte, t: Tsp, s: Long): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base23_JL.this.overrideMe_JL(Base23_JL.this.miniboxing|tests|compile|Base23_JL|T_TypeTag(), MiniboxConversions.this.box2minibox_tt[Tsp](t, Base23_JL.this.miniboxing|tests|compile|Base23_JL|T_TypeTag()), MiniboxConversions.this.minibox2box[Ssp](s, S_TypeTag)), Base23_JL.this.miniboxing|tests|compile|Base23_JL|T_TypeTag())
  };
  abstract trait Base23_LJ[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base23[Tsp,Ssp] {
    def miniboxing|tests|compile|Base23_LJ|S_TypeTag(): Byte;
    def overrideMe(t: Tsp, s: Ssp): Tsp = Base23_LJ.this.overrideMe_LJ(Base23_LJ.this.miniboxing|tests|compile|Base23_LJ|S_TypeTag(), t, MiniboxConversions.this.box2minibox_tt[Ssp](s, Base23_LJ.this.miniboxing|tests|compile|Base23_LJ|S_TypeTag()));
    def overrideMe_JJ(T_TypeTag: Byte, S_TypeTag: Byte, t: Long, s: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base23_LJ.this.overrideMe_LJ(S_TypeTag, MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag), s), T_TypeTag);
    def overrideMe_JL(T_TypeTag: Byte, t: Long, s: Ssp): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base23_LJ.this.overrideMe_LJ(Base23_LJ.this.miniboxing|tests|compile|Base23_LJ|S_TypeTag(), MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag), MiniboxConversions.this.box2minibox_tt[Ssp](s, Base23_LJ.this.miniboxing|tests|compile|Base23_LJ|S_TypeTag())), T_TypeTag);
    def overrideMe_LJ(S_TypeTag: Byte, t: Tsp, s: Long): Tsp = t
  };
  abstract trait Base23_LL[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base23[Tsp,Ssp] {
    def overrideMe(t: Tsp, s: Ssp): Tsp = t;
    def overrideMe_JJ(T_TypeTag: Byte, S_TypeTag: Byte, t: Long, s: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base23_LL.this.overrideMe(MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag), MiniboxConversions.this.minibox2box[Ssp](s, S_TypeTag)), T_TypeTag);
    def overrideMe_JL(T_TypeTag: Byte, t: Long, s: Ssp): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base23_LL.this.overrideMe(MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag), s), T_TypeTag);
    def overrideMe_LJ(S_TypeTag: Byte, t: Tsp, s: Long): Tsp = Base23_LL.this.overrideMe(t, MiniboxConversions.this.minibox2box[Ssp](s, S_TypeTag))
  };
  class LongIsBase21Base22andBase23 extends Object with miniboxing.tests.compile.Base21_J[Long,Long] with miniboxing.tests.compile.Base22_J[Long,Long] with miniboxing.tests.compile.Base23_JJ[Long,Long] {
    def miniboxing|tests|compile|Base21_J|T_TypeTag(): Byte = 6;
    def miniboxing|tests|compile|Base22_J|T_TypeTag(): Byte = 6;
    def miniboxing|tests|compile|Base23_JJ|S_TypeTag(): Byte = 6;
    def miniboxing|tests|compile|Base23_JJ|T_TypeTag(): Byte = 6;
    def <init>(): miniboxing.tests.compile.LongIsBase21Base22andBase23 = {
      LongIsBase21Base22andBase23.super.<init>();
      ()
    };
    override def overrideMe(t: Long, s: Long): Long = MiniboxConversions.this.minibox2long(LongIsBase21Base22andBase23.this.overrideMe_JJ(6, 6, MiniboxConversions.this.long2minibox(t), MiniboxConversions.this.long2minibox(s)));
    override def overrideMe_JJ(T_TypeTag: Byte, S_TypeTag: Byte, t: Long, s: Long): Long = MiniboxConversions.this.long2minibox(scala.this.Predef.???())
  }
}
[Now checking: minibox-commit]