[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait CCC[@miniboxed T] extends Object {
    <stable> <accessor> <paramaccessor> def t(): T;
    <stable> <accessor> def t_J(T_TypeTag: Byte): Long;
    def foo(t1: T, t2: Any): String;
    def foo_J(T_TypeTag: Byte, t1: Long, t2: Any): String
  };
  class CCC_J[Tsp] extends Object with miniboxing.tests.compile.CCC[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|CCC_J|T_TypeTag: Byte = _;
    <paramaccessor> private[this] val t: Long = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = MiniboxConversions.this.minibox2box[Tsp](CCC_J.this.t_J(CCC_J.this.miniboxing|tests|compile|CCC_J|T_TypeTag), CCC_J.this.miniboxing|tests|compile|CCC_J|T_TypeTag);
    <stable> <accessor> def t_J(T_TypeTag: Byte): Long = CCC_J.this.t;
    def <init>(miniboxing|tests|compile|CCC_J|T_TypeTag: Byte, t: Long): miniboxing.tests.compile.CCC_J[Tsp] = {
      CCC_J.super.<init>();
      ()
    };
    def foo(t1: Tsp, t2: Any): String = CCC_J.this.foo_J(CCC_J.this.miniboxing|tests|compile|CCC_J|T_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, CCC_J.this.miniboxing|tests|compile|CCC_J|T_TypeTag), t2);
    def foo_J(T_TypeTag: Byte, t1: Long, t2: Any): String = {
      MiniboxDispatch.this.mboxed_hashCode(CCC_J.this.t_J(T_TypeTag), T_TypeTag);
      MiniboxDispatch.this.mboxed_eqeq_notag(CCC_J.this.t_J(T_TypeTag), t1);
      MiniboxDispatch.this.mboxed_eqeq_other(CCC_J.this.t_J(T_TypeTag), T_TypeTag, t2);
      MiniboxDispatch.this.mboxed_toString(CCC_J.this.t_J(T_TypeTag), T_TypeTag)
    }
  };
  class CCC_L[Tsp] extends Object with miniboxing.tests.compile.CCC[Tsp] {
    <paramaccessor> private[this] val t: Tsp = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = CCC_L.this.t;
    <stable> <accessor> def t_J(T_TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](CCC_L.this.t(), T_TypeTag);
    def <init>(t: Tsp): miniboxing.tests.compile.CCC_L[Tsp] = {
      CCC_L.super.<init>();
      ()
    };
    def foo(t1: Tsp, t2: Any): String = {
      CCC_L.this.t().hashCode();
      CCC_L.this.t().==(t1);
      CCC_L.this.t().==(t2);
      CCC_L.this.t().toString()
    };
    def foo_J(T_TypeTag: Byte, t1: Long, t2: Any): String = CCC_L.this.foo(MiniboxConversions.this.minibox2box[Tsp](t1, T_TypeTag), t2)
  }
}
[Now checking: minibox-commit]