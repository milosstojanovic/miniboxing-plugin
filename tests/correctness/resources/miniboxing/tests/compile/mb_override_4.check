Specializing class Base42...
  // interface:
  abstract trait Base42[T, S] extends Base41[T,S] {
    override def overrideMe(t1: T,t2: T,t3: T,s: S): T
    override def overrideMe_J(val T_TypeTag: Byte,t1: T @storage[Long],t2: T @storage[Long],t3: T @storage[Long],s: S): T @storage[Long]
  }
  // specialized class:
  class Base42_J[Tsp, Ssp] extends Base41[Tsp,Ssp] with Base42[Tsp,Ssp] {
    def <init>(val miniboxing|tests|compile|Base42_J|T_TypeTag: Byte): miniboxing.tests.compile.Base42_J[Tsp,Ssp] // is a specialized implementation of constructor Base42
    override def overrideMe(t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp): Tsp           // is a forwarder to the specialized member
    override def overrideMe_J(val T_TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a specialized implementation of method overrideMe
    private[this] val miniboxing|tests|compile|Base42_J|T_TypeTag: Byte    // is a type tag
  }
  // specialized class:
  class Base42_L[Tsp, Ssp] extends Base41[Tsp,Ssp] with Base42[Tsp,Ssp] {
    def <init>(): miniboxing.tests.compile.Base42_L[Tsp,Ssp]               // is a specialized implementation of constructor Base42
    override def overrideMe(t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp): Tsp           // is a specialized implementation of method overrideMe
    override def overrideMe_J(val T_TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
  }
Specializing class Base43...
  // interface:
  abstract trait Base43[T, S] extends Base42[T,S] {
    override def overrideMe(t1: T,t2: T,t3: T,s: S): T
    override def overrideMe_JJ(val T_TypeTag: Byte,val S_TypeTag: Byte,t1: T @storage[Long],t2: T @storage[Long],t3: T @storage[Long],s: S @storage[Long]): T @storage[Long]
    override def overrideMe_JL(val T_TypeTag: Byte,t1: T @storage[Long],t2: T @storage[Long],t3: T @storage[Long],s: S): T @storage[Long]
    override def overrideMe_LJ(val S_TypeTag: Byte,t1: T,t2: T,t3: T,s: S @storage[Long]): T
  }
  // specialized class:
  class Base43_JJ[Tsp, Ssp] extends Base42_J[Tsp,Ssp] with Base43[Tsp,Ssp] {
    def <init>(val miniboxing|tests|compile|Base43_JJ|T_TypeTag: Byte,val miniboxing|tests|compile|Base43_JJ|S_TypeTag: Byte): miniboxing.tests.compile.Base43_JJ[Tsp,Ssp] // is a specialized implementation of constructor Base43
    override def overrideMe(t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp): Tsp           // is a forwarder to the specialized member
    override def overrideMe_JJ(val T_TypeTag: Byte,val S_TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a specialized implementation of method overrideMe
    override def overrideMe_JL(val T_TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
    override def overrideMe_LJ(val S_TypeTag: Byte,t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp @storage[Long]): Tsp // is a forwarder to the specialized member
    private[this] val miniboxing|tests|compile|Base43_JJ|S_TypeTag: Byte   // is a type tag
    private[this] val miniboxing|tests|compile|Base43_JJ|T_TypeTag: Byte   // is a type tag
  }
  // specialized class:
  class Base43_LJ[Tsp, Ssp] extends Base42_L[Tsp,Ssp] with Base43[Tsp,Ssp] {
    def <init>(val miniboxing|tests|compile|Base43_LJ|S_TypeTag: Byte): miniboxing.tests.compile.Base43_LJ[Tsp,Ssp] // is a specialized implementation of constructor Base43
    override def overrideMe(t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp): Tsp           // is a forwarder to the specialized member
    override def overrideMe_JJ(val T_TypeTag: Byte,val S_TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a forwarder to the specialized member
    override def overrideMe_JL(val T_TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
    override def overrideMe_LJ(val S_TypeTag: Byte,t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp @storage[Long]): Tsp // is a specialized implementation of method overrideMe
    private[this] val miniboxing|tests|compile|Base43_LJ|S_TypeTag: Byte   // is a type tag
  }
  // specialized class:
  class Base43_JL[Tsp, Ssp] extends Base42_J[Tsp,Ssp] with Base43[Tsp,Ssp] {
    def <init>(val miniboxing|tests|compile|Base43_JL|T_TypeTag: Byte): miniboxing.tests.compile.Base43_JL[Tsp,Ssp] // is a specialized implementation of constructor Base43
    override def overrideMe(t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp): Tsp           // is a forwarder to the specialized member
    override def overrideMe_JJ(val T_TypeTag: Byte,val S_TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a forwarder to the specialized member
    override def overrideMe_JL(val T_TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a specialized implementation of method overrideMe
    override def overrideMe_LJ(val S_TypeTag: Byte,t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp @storage[Long]): Tsp // is a forwarder to the specialized member
    private[this] val miniboxing|tests|compile|Base43_JL|T_TypeTag: Byte   // is a type tag
  }
  // specialized class:
  class Base43_LL[Tsp, Ssp] extends Base42_L[Tsp,Ssp] with Base43[Tsp,Ssp] {
    def <init>(): miniboxing.tests.compile.Base43_LL[Tsp,Ssp]              // is a specialized implementation of constructor Base43
    override def overrideMe(t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp): Tsp           // is a specialized implementation of method overrideMe
    override def overrideMe_JJ(val T_TypeTag: Byte,val S_TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a forwarder to the specialized member
    override def overrideMe_JL(val T_TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
    override def overrideMe_LJ(val S_TypeTag: Byte,t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp @storage[Long]): Tsp // is a forwarder to the specialized member
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  class Base41[T, S] extends Object {
    def <init>(): miniboxing.tests.compile.Base41[T,S] = {
      Base41.super.<init>();
      ()
    };
    def overrideMe(t1: T, t2: T, t3: T, s: S): T = t1
  };
  abstract trait Base42[@miniboxed T, S] extends miniboxing.tests.compile.Base41[T,S] {
    override def overrideMe(t1: T, t2: T, t3: T, s: S): T;
    override def overrideMe_J(T_TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: S): Long
  };
  class Base42_J[Tsp, Ssp] extends miniboxing.tests.compile.Base41[Tsp,Ssp] with miniboxing.tests.compile.Base42[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base42_J|T_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base42_J|T_TypeTag: Byte): miniboxing.tests.compile.Base42_J[Tsp,Ssp] = {
      Base42_J.super.<init>();
      ()
    };
    override def overrideMe(t1: Tsp, t2: Tsp, t3: Tsp, s: Ssp): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base42_J.this.overrideMe_J(Base42_J.this.miniboxing|tests|compile|Base42_J|T_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base42_J.this.miniboxing|tests|compile|Base42_J|T_TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base42_J.this.miniboxing|tests|compile|Base42_J|T_TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t3, Base42_J.this.miniboxing|tests|compile|Base42_J|T_TypeTag), s), Base42_J.this.miniboxing|tests|compile|Base42_J|T_TypeTag);
    override def overrideMe_J(T_TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Ssp): Long = t2
  };
  class Base42_L[Tsp, Ssp] extends miniboxing.tests.compile.Base41[Tsp,Ssp] with miniboxing.tests.compile.Base42[Tsp,Ssp] {
    def <init>(): miniboxing.tests.compile.Base42_L[Tsp,Ssp] = {
      Base42_L.super.<init>();
      ()
    };
    override def overrideMe(t1: Tsp, t2: Tsp, t3: Tsp, s: Ssp): Tsp = t2;
    override def overrideMe_J(T_TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Ssp): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base42_L.this.overrideMe(MiniboxConversions.this.minibox2box[Tsp](t1, T_TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T_TypeTag), MiniboxConversions.this.minibox2box[Tsp](t3, T_TypeTag), s), T_TypeTag)
  };
  abstract trait Base43[@miniboxed T, @miniboxed S] extends miniboxing.tests.compile.Base41[T,S] {
    override def overrideMe(t1: T, t2: T, t3: T, s: S): T;
    override def overrideMe_JJ(T_TypeTag: Byte, S_TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Long): Long;
    override def overrideMe_JL(T_TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: S): Long;
    override def overrideMe_LJ(S_TypeTag: Byte, t1: T, t2: T, t3: T, s: Long): T
  };
  class Base43_JJ[Tsp, Ssp] extends miniboxing.tests.compile.Base42_J[Tsp,Ssp] with miniboxing.tests.compile.Base43[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base43_JJ|S_TypeTag: Byte = _;
    <paramaccessor> private[this] val miniboxing|tests|compile|Base43_JJ|T_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base43_JJ|T_TypeTag: Byte, miniboxing|tests|compile|Base43_JJ|S_TypeTag: Byte): miniboxing.tests.compile.Base43_JJ[Tsp,Ssp] = {
      Base43_JJ.super.<init>(miniboxing|tests|compile|Base43_JJ|T_TypeTag);
      ()
    };
    override def overrideMe(t1: Tsp, t2: Tsp, t3: Tsp, s: Ssp): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base43_JJ.this.overrideMe_JJ(Base43_JJ.this.miniboxing|tests|compile|Base43_JJ|T_TypeTag, Base43_JJ.this.miniboxing|tests|compile|Base43_JJ|S_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base43_JJ.this.miniboxing|tests|compile|Base43_JJ|T_TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base43_JJ.this.miniboxing|tests|compile|Base43_JJ|T_TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t3, Base43_JJ.this.miniboxing|tests|compile|Base43_JJ|T_TypeTag), MiniboxConversions.this.box2minibox_tt[Ssp](s, Base43_JJ.this.miniboxing|tests|compile|Base43_JJ|S_TypeTag)), Base43_JJ.this.miniboxing|tests|compile|Base43_JJ|T_TypeTag);
    override def overrideMe_JJ(T_TypeTag: Byte, S_TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Long): Long = t3;
    override def overrideMe_JL(T_TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Ssp): Long = Base43_JJ.this.overrideMe_JJ(T_TypeTag, Base43_JJ.this.miniboxing|tests|compile|Base43_JJ|S_TypeTag, t1, t2, t3, MiniboxConversions.this.box2minibox_tt[Ssp](s, Base43_JJ.this.miniboxing|tests|compile|Base43_JJ|S_TypeTag));
    override def overrideMe_LJ(S_TypeTag: Byte, t1: Tsp, t2: Tsp, t3: Tsp, s: Long): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base43_JJ.this.overrideMe_JJ(Base43_JJ.this.miniboxing|tests|compile|Base43_JJ|T_TypeTag, S_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base43_JJ.this.miniboxing|tests|compile|Base43_JJ|T_TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base43_JJ.this.miniboxing|tests|compile|Base43_JJ|T_TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t3, Base43_JJ.this.miniboxing|tests|compile|Base43_JJ|T_TypeTag), s), Base43_JJ.this.miniboxing|tests|compile|Base43_JJ|T_TypeTag)
  };
  class Base43_JL[Tsp, Ssp] extends miniboxing.tests.compile.Base42_J[Tsp,Ssp] with miniboxing.tests.compile.Base43[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base43_JL|T_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base43_JL|T_TypeTag: Byte): miniboxing.tests.compile.Base43_JL[Tsp,Ssp] = {
      Base43_JL.super.<init>(miniboxing|tests|compile|Base43_JL|T_TypeTag);
      ()
    };
    override def overrideMe(t1: Tsp, t2: Tsp, t3: Tsp, s: Ssp): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base43_JL.this.overrideMe_JL(Base43_JL.this.miniboxing|tests|compile|Base43_JL|T_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base43_JL.this.miniboxing|tests|compile|Base43_JL|T_TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base43_JL.this.miniboxing|tests|compile|Base43_JL|T_TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t3, Base43_JL.this.miniboxing|tests|compile|Base43_JL|T_TypeTag), s), Base43_JL.this.miniboxing|tests|compile|Base43_JL|T_TypeTag);
    override def overrideMe_JJ(T_TypeTag: Byte, S_TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Long): Long = Base43_JL.this.overrideMe_JL(T_TypeTag, t1, t2, t3, MiniboxConversions.this.minibox2box[Ssp](s, S_TypeTag));
    override def overrideMe_JL(T_TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Ssp): Long = t3;
    override def overrideMe_LJ(S_TypeTag: Byte, t1: Tsp, t2: Tsp, t3: Tsp, s: Long): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base43_JL.this.overrideMe_JL(Base43_JL.this.miniboxing|tests|compile|Base43_JL|T_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base43_JL.this.miniboxing|tests|compile|Base43_JL|T_TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base43_JL.this.miniboxing|tests|compile|Base43_JL|T_TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t3, Base43_JL.this.miniboxing|tests|compile|Base43_JL|T_TypeTag), MiniboxConversions.this.minibox2box[Ssp](s, S_TypeTag)), Base43_JL.this.miniboxing|tests|compile|Base43_JL|T_TypeTag)
  };
  class Base43_LJ[Tsp, Ssp] extends miniboxing.tests.compile.Base42_L[Tsp,Ssp] with miniboxing.tests.compile.Base43[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base43_LJ|S_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base43_LJ|S_TypeTag: Byte): miniboxing.tests.compile.Base43_LJ[Tsp,Ssp] = {
      Base43_LJ.super.<init>();
      ()
    };
    override def overrideMe(t1: Tsp, t2: Tsp, t3: Tsp, s: Ssp): Tsp = Base43_LJ.this.overrideMe_LJ(Base43_LJ.this.miniboxing|tests|compile|Base43_LJ|S_TypeTag, t1, t2, t3, MiniboxConversions.this.box2minibox_tt[Ssp](s, Base43_LJ.this.miniboxing|tests|compile|Base43_LJ|S_TypeTag));
    override def overrideMe_JJ(T_TypeTag: Byte, S_TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base43_LJ.this.overrideMe_LJ(S_TypeTag, MiniboxConversions.this.minibox2box[Tsp](t1, T_TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T_TypeTag), MiniboxConversions.this.minibox2box[Tsp](t3, T_TypeTag), s), T_TypeTag);
    override def overrideMe_JL(T_TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Ssp): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base43_LJ.this.overrideMe_LJ(Base43_LJ.this.miniboxing|tests|compile|Base43_LJ|S_TypeTag, MiniboxConversions.this.minibox2box[Tsp](t1, T_TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T_TypeTag), MiniboxConversions.this.minibox2box[Tsp](t3, T_TypeTag), MiniboxConversions.this.box2minibox_tt[Ssp](s, Base43_LJ.this.miniboxing|tests|compile|Base43_LJ|S_TypeTag)), T_TypeTag);
    override def overrideMe_LJ(S_TypeTag: Byte, t1: Tsp, t2: Tsp, t3: Tsp, s: Long): Tsp = t3
  };
  class Base43_LL[Tsp, Ssp] extends miniboxing.tests.compile.Base42_L[Tsp,Ssp] with miniboxing.tests.compile.Base43[Tsp,Ssp] {
    def <init>(): miniboxing.tests.compile.Base43_LL[Tsp,Ssp] = {
      Base43_LL.super.<init>();
      ()
    };
    override def overrideMe(t1: Tsp, t2: Tsp, t3: Tsp, s: Ssp): Tsp = t3;
    override def overrideMe_JJ(T_TypeTag: Byte, S_TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base43_LL.this.overrideMe(MiniboxConversions.this.minibox2box[Tsp](t1, T_TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T_TypeTag), MiniboxConversions.this.minibox2box[Tsp](t3, T_TypeTag), MiniboxConversions.this.minibox2box[Ssp](s, S_TypeTag)), T_TypeTag);
    override def overrideMe_JL(T_TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Ssp): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base43_LL.this.overrideMe(MiniboxConversions.this.minibox2box[Tsp](t1, T_TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T_TypeTag), MiniboxConversions.this.minibox2box[Tsp](t3, T_TypeTag), s), T_TypeTag);
    override def overrideMe_LJ(S_TypeTag: Byte, t1: Tsp, t2: Tsp, t3: Tsp, s: Long): Tsp = Base43_LL.this.overrideMe(t1, t2, t3, MiniboxConversions.this.minibox2box[Ssp](s, S_TypeTag))
  }
}
[Now checking: minibox-commit]