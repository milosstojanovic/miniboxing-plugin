[[syntax trees at end of            minibox-inject]] // newSource1.scala
package miniboxing.tests.compile.nested_rewiring.test3 {
  abstract trait C[@miniboxed T, @miniboxed U] extends Object;
  class C_JJ[Tsp, Usp] extends Object with miniboxing.tests.compile.nested_rewiring.test3.C[Tsp,Usp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test3|C_JJ|T_TypeTag: Byte = _;
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test3|C_JJ|U_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|nested_rewiring|test3|C_JJ|T_TypeTag: Byte, miniboxing|tests|compile|nested_rewiring|test3|C_JJ|U_TypeTag: Byte): miniboxing.tests.compile.nested_rewiring.test3.C_JJ[Tsp,Usp] = {
      C_JJ.super.<init>();
      ()
    }
  };
  class C_JL[Tsp, Usp] extends Object with miniboxing.tests.compile.nested_rewiring.test3.C[Tsp,Usp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test3|C_JL|T_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|nested_rewiring|test3|C_JL|T_TypeTag: Byte): miniboxing.tests.compile.nested_rewiring.test3.C_JL[Tsp,Usp] = {
      C_JL.super.<init>();
      ()
    }
  };
  class C_LJ[Tsp, Usp] extends Object with miniboxing.tests.compile.nested_rewiring.test3.C[Tsp,Usp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test3|C_LJ|U_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|nested_rewiring|test3|C_LJ|U_TypeTag: Byte): miniboxing.tests.compile.nested_rewiring.test3.C_LJ[Tsp,Usp] = {
      C_LJ.super.<init>();
      ()
    }
  };
  class C_LL[Tsp, Usp] extends Object with miniboxing.tests.compile.nested_rewiring.test3.C[Tsp,Usp] {
    def <init>(): miniboxing.tests.compile.nested_rewiring.test3.C_LL[Tsp,Usp] = {
      C_LL.super.<init>();
      ()
    }
  };
  abstract trait D[@miniboxed S] extends Object {
    def bar(): Nothing
  };
  class D_J[Ssp] extends Object with miniboxing.tests.compile.nested_rewiring.test3.D[Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test3|D_J|S_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|nested_rewiring|test3|D_J|S_TypeTag: Byte): miniboxing.tests.compile.nested_rewiring.test3.D_J[Ssp] = {
      D_J.super.<init>();
      ()
    };
    def bar(): Nothing = {
      class F extends Object {
        def <init>(): F = {
          F.super.<init>();
          ()
        };
        def foo[@miniboxed V](s: Ssp, v: V): miniboxing.tests.compile.nested_rewiring.test3.C[Ssp,V] = {
          def zoo(): miniboxing.tests.compile.nested_rewiring.test3.C[Ssp,V] = {
            class Z extends miniboxing.tests.compile.nested_rewiring.test3.C_JL[Ssp,V] {
              def <init>(): Z = {
                Z.super.<init>(D_J.this.miniboxing|tests|compile|nested_rewiring|test3|D_J|S_TypeTag);
                ()
              }
            };
            new Z()
          };
          zoo()
        };
        def foo_n_J[V](V_TypeTag: Byte, s: Ssp, v: V @storage[Long]): miniboxing.tests.compile.nested_rewiring.test3.C[Ssp,V] = {
          def zoo(): miniboxing.tests.compile.nested_rewiring.test3.C[Ssp,V] = {
            class Z extends miniboxing.tests.compile.nested_rewiring.test3.C_JJ[Ssp,V] {
              def <init>(): Z = {
                Z.super.<init>(D_J.this.miniboxing|tests|compile|nested_rewiring|test3|D_J|S_TypeTag, V_TypeTag);
                ()
              }
            };
            new Z()
          };
          zoo()
        }
      };
      scala.this.Predef.???()
    }
  };
  class D_L[Ssp] extends Object with miniboxing.tests.compile.nested_rewiring.test3.D[Ssp] {
    def <init>(): miniboxing.tests.compile.nested_rewiring.test3.D_L[Ssp] = {
      D_L.super.<init>();
      ()
    };
    def bar(): Nothing = {
      class F extends Object {
        def <init>(): F = {
          F.super.<init>();
          ()
        };
        def foo[@miniboxed V](s: Ssp, v: V): miniboxing.tests.compile.nested_rewiring.test3.C[Ssp,V] = {
          def zoo(): miniboxing.tests.compile.nested_rewiring.test3.C[Ssp,V] = {
            class Z extends miniboxing.tests.compile.nested_rewiring.test3.C_LL[Ssp,V] {
              def <init>(): Z = {
                Z.super.<init>();
                ()
              }
            };
            new Z()
          };
          zoo()
        };
        def foo_n_J[V](V_TypeTag: Byte, s: Ssp, v: V @storage[Long]): miniboxing.tests.compile.nested_rewiring.test3.C[Ssp,V] = {
          def zoo(): miniboxing.tests.compile.nested_rewiring.test3.C[Ssp,V] = {
            class Z extends miniboxing.tests.compile.nested_rewiring.test3.C_LJ[Ssp,V] {
              def <init>(): Z = {
                Z.super.<init>(V_TypeTag);
                ()
              }
            };
            new Z()
          };
          zoo()
        }
      };
      scala.this.Predef.???()
    }
  }
}
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.