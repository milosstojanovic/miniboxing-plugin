Specializing class CCCCC...
  // interface:
  abstract trait CCCCC[T] extends Object {
    def test(): Unit
    def test_J(val T_TypeTag: Byte): Unit
  }
  // specialized class:
  class CCCCC_J[Tsp] extends CCCCC[Tsp] {
    def <init>(val miniboxing|tests|compile|nested|CCCCC_J|T_TypeTag: Byte,c: Tsp @storage[Long]): miniboxing.tests.compile.nested.CCCCC_J[Tsp] // is a specialized implementation of constructor CCCCC
    def test(): Unit                                                       // is a forwarder to the specialized member
    def test_J(val T_TypeTag: Byte): Unit                                  // is a specialized implementation of method test
    private[this] val c: Tsp @storage[Long]                                // is a specialized implementation of value c
    private[this] val miniboxing|tests|compile|nested|CCCCC_J|T_TypeTag: Byte // is a type tag
  }
  // specialized class:
  class CCCCC_L[Tsp] extends CCCCC[Tsp] {
    def <init>(c: Tsp): miniboxing.tests.compile.nested.CCCCC_L[Tsp]       // is a specialized implementation of constructor CCCCC
    def test(): Unit                                                       // is a specialized implementation of method test
    def test_J(val T_TypeTag: Byte): Unit                                  // is a forwarder to the specialized member
    private[this] val c: Tsp                                               // is a specialized implementation of value c
  }
[Now checking: minibox-inject]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.nested {
  abstract trait CCCCC[@miniboxed T] extends Object {
    def test(): Unit;
    def test_J(T_TypeTag: Byte): Unit
  };
  class CCCCC_J[Tsp] extends Object with miniboxing.tests.compile.nested.CCCCC[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested|CCCCC_J|T_TypeTag: Byte = _;
    <paramaccessor> private[this] val c: Long = _;
    def <init>(miniboxing|tests|compile|nested|CCCCC_J|T_TypeTag: Byte, c: Long): miniboxing.tests.compile.nested.CCCCC_J[Tsp] = {
      CCCCC_J.super.<init>();
      ()
    };
    def test(): Unit = CCCCC_J.this.test_J(CCCCC_J.this.miniboxing|tests|compile|nested|CCCCC_J|T_TypeTag);
    def test_J(T_TypeTag: Byte): Unit = {
      class DDDDD[U] extends Object {
        <paramaccessor> private[this] val d: U = _;
        def <init>(d: U): DDDDD[U] = {
          DDDDD.super.<init>();
          ()
        };
        private[this] val x1: Long = CCCCC_J.this.c;
        <stable> <accessor> def x1(): Tsp = MiniboxConversions.this.minibox2box[Tsp](DDDDD.this.x1, T_TypeTag);
        private[this] val x2: U = DDDDD.this.d;
        <stable> <accessor> def x2(): U = DDDDD.this.x2;
        def foo(): Unit = {
          val x3: Long = CCCCC_J.this.c;
          val x4: U = DDDDD.this.d;
          scala.this.Predef.println(DDDDD.this.x1().==(DDDDD.this.x2()));
          scala.this.Predef.println(MiniboxDispatch.this.mboxed_eqeq_other(x3, T_TypeTag, x4))
        }
      };
      new DDDDD[Tsp](MiniboxConversions.this.minibox2box[Tsp](CCCCC_J.this.c, T_TypeTag)).foo()
    }
  };
  class CCCCC_L[Tsp] extends Object with miniboxing.tests.compile.nested.CCCCC[Tsp] {
    <paramaccessor> private[this] val c: Tsp = _;
    def <init>(c: Tsp): miniboxing.tests.compile.nested.CCCCC_L[Tsp] = {
      CCCCC_L.super.<init>();
      ()
    };
    def test(): Unit = {
      class DDDDD[U] extends Object {
        <paramaccessor> private[this] val d: U = _;
        def <init>(d: U): DDDDD[U] = {
          DDDDD.super.<init>();
          ()
        };
        private[this] val x1: Tsp = CCCCC_L.this.c;
        <stable> <accessor> def x1(): Tsp = DDDDD.this.x1;
        private[this] val x2: U = DDDDD.this.d;
        <stable> <accessor> def x2(): U = DDDDD.this.x2;
        def foo(): Unit = {
          val x3: Tsp = CCCCC_L.this.c;
          val x4: U = DDDDD.this.d;
          scala.this.Predef.println(DDDDD.this.x1().==(DDDDD.this.x2()));
          scala.this.Predef.println(x3.==(x4))
        }
      };
      new DDDDD[Tsp](CCCCC_L.this.c).foo()
    };
    def test_J(T_TypeTag: Byte): Unit = CCCCC_L.this.test()
  }
}
[Now checking: minibox-commit]