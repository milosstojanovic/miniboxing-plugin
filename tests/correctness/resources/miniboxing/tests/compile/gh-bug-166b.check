newSource1.scala:8: warning: The side-effecting statement(s) in the miniboxed trait B's constructor will not be miniboxed. Please note this is caused by the fact that the miniboxing plugin was instructed not to specialize side-effecting constructor statements.
  println(super.getStr)
         ^
newSource1.scala:8: error: You ran into a fundamental limitation of the miniboxing transformation. When miniboxing trait B, the miniboxing plugin moves all the fields and super-accessors to the specialized subclasses. Therefore, trying to access them in the nested trait miniboxing.tests.compile.bug166b.B is not a valid pattern anymore. Please read https://github.com/miniboxing/miniboxing-plugin/issues/166 for a thorough explanation and some workarounds for the problem. Please note this is caused by the fact that the miniboxing plugin was instructed not to specialize side-effecting constructor statements.Thanks and sorry! Please note this is caused by the fact that the miniboxing plugin was instructed not to specialize side-effecting constructor statements.
  println(super.getStr)
                ^
newSource1.scala:9: warning: The class X will not be miniboxed based on type parameter(s) T of miniboxed trait B. To have it specialized, add the type parameters of trait B, marked with "@miniboxed" to the definition of class X and instantiate it explicitly passing the type parameters from trait B:
  class X {
        ^
newSource1.scala:10: error: You ran into a fundamental limitation of the miniboxing transformation. When miniboxing trait B, the miniboxing plugin moves all the fields and super-accessors to the specialized subclasses. Therefore, trying to access them in the nested method miniboxing.tests.compile.bug166b.B.X.baz is not a valid pattern anymore. Please read https://github.com/miniboxing/miniboxing-plugin/issues/166 for a thorough explanation and some workarounds for the problem. Thanks and sorry!
    def baz = println(B.super.getStr)
                              ^