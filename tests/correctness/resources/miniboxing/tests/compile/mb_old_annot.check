Specializing class MyTuple2...
  // interface:
  abstract trait MyTuple2[T1, T2] extends Object {
    val t1(): T1
    val t1_JJ(val T1_TypeTag: Byte,val T2_TypeTag: Byte): T1 @storage[Long]
    val t1_JL(val T1_TypeTag: Byte): T1 @storage[Long]
    val t1_LJ(val T2_TypeTag: Byte): T1
    val t2(): T2
    val t2_JJ(val T1_TypeTag: Byte,val T2_TypeTag: Byte): T2 @storage[Long]
    val t2_JL(val T1_TypeTag: Byte): T2
    val t2_LJ(val T2_TypeTag: Byte): T2 @storage[Long]
  }
  // specialized class:
  class MyTuple2_JJ[T1sp, T2sp] extends MyTuple2[T1sp,T2sp] {
    def <init>(val miniboxing|tests|compile|MyTuple2_JJ|T1_TypeTag: Byte,val miniboxing|tests|compile|MyTuple2_JJ|T2_TypeTag: Byte,t1: T1sp @storage[Long],t2: T2sp @storage[Long]): miniboxing.tests.compile.MyTuple2_JJ[T1sp,T2sp] // is a specialized implementation of constructor MyTuple2
    private[this] val miniboxing|tests|compile|MyTuple2_JJ|T1_TypeTag: Byte // is a type tag
    private[this] val miniboxing|tests|compile|MyTuple2_JJ|T2_TypeTag: Byte // is a type tag
    private[this] val t1: T1sp @storage[Long]                              // is a specialized implementation of value t1
    private[this] val t2: T2sp @storage[Long]                              // is a specialized implementation of value t2
    val t1(): T1sp                                                         // is a forwarder to the specialized member
    val t1_JJ(val T1_TypeTag: Byte,val T2_TypeTag: Byte): T1sp @storage[Long] // is a setter or getter for value t1
    val t1_JL(val T1_TypeTag: Byte): T1sp @storage[Long]                   // is a forwarder to the specialized member
    val t1_LJ(val T2_TypeTag: Byte): T1sp                                  // is a forwarder to the specialized member
    val t2(): T2sp                                                         // is a forwarder to the specialized member
    val t2_JJ(val T1_TypeTag: Byte,val T2_TypeTag: Byte): T2sp @storage[Long] // is a setter or getter for value t2
    val t2_JL(val T1_TypeTag: Byte): T2sp                                  // is a forwarder to the specialized member
    val t2_LJ(val T2_TypeTag: Byte): T2sp @storage[Long]                   // is a forwarder to the specialized member
  }
  // specialized class:
  class MyTuple2_LJ[T1sp, T2sp] extends MyTuple2[T1sp,T2sp] {
    def <init>(val miniboxing|tests|compile|MyTuple2_LJ|T2_TypeTag: Byte,t1: T1sp,t2: T2sp @storage[Long]): miniboxing.tests.compile.MyTuple2_LJ[T1sp,T2sp] // is a specialized implementation of constructor MyTuple2
    private[this] val miniboxing|tests|compile|MyTuple2_LJ|T2_TypeTag: Byte // is a type tag
    private[this] val t1: T1sp                                             // is a specialized implementation of value t1
    private[this] val t2: T2sp @storage[Long]                              // is a specialized implementation of value t2
    val t1(): T1sp                                                         // is a forwarder to the specialized member
    val t1_JJ(val T1_TypeTag: Byte,val T2_TypeTag: Byte): T1sp @storage[Long] // is a forwarder to the specialized member
    val t1_JL(val T1_TypeTag: Byte): T1sp @storage[Long]                   // is a forwarder to the specialized member
    val t1_LJ(val T2_TypeTag: Byte): T1sp                                  // is a setter or getter for value t1
    val t2(): T2sp                                                         // is a forwarder to the specialized member
    val t2_JJ(val T1_TypeTag: Byte,val T2_TypeTag: Byte): T2sp @storage[Long] // is a forwarder to the specialized member
    val t2_JL(val T1_TypeTag: Byte): T2sp                                  // is a forwarder to the specialized member
    val t2_LJ(val T2_TypeTag: Byte): T2sp @storage[Long]                   // is a setter or getter for value t2
  }
  // specialized class:
  class MyTuple2_JL[T1sp, T2sp] extends MyTuple2[T1sp,T2sp] {
    def <init>(val miniboxing|tests|compile|MyTuple2_JL|T1_TypeTag: Byte,t1: T1sp @storage[Long],t2: T2sp): miniboxing.tests.compile.MyTuple2_JL[T1sp,T2sp] // is a specialized implementation of constructor MyTuple2
    private[this] val miniboxing|tests|compile|MyTuple2_JL|T1_TypeTag: Byte // is a type tag
    private[this] val t1: T1sp @storage[Long]                              // is a specialized implementation of value t1
    private[this] val t2: T2sp                                             // is a specialized implementation of value t2
    val t1(): T1sp                                                         // is a forwarder to the specialized member
    val t1_JJ(val T1_TypeTag: Byte,val T2_TypeTag: Byte): T1sp @storage[Long] // is a forwarder to the specialized member
    val t1_JL(val T1_TypeTag: Byte): T1sp @storage[Long]                   // is a setter or getter for value t1
    val t1_LJ(val T2_TypeTag: Byte): T1sp                                  // is a forwarder to the specialized member
    val t2(): T2sp                                                         // is a forwarder to the specialized member
    val t2_JJ(val T1_TypeTag: Byte,val T2_TypeTag: Byte): T2sp @storage[Long] // is a forwarder to the specialized member
    val t2_JL(val T1_TypeTag: Byte): T2sp                                  // is a setter or getter for value t2
    val t2_LJ(val T2_TypeTag: Byte): T2sp @storage[Long]                   // is a forwarder to the specialized member
  }
  // specialized class:
  class MyTuple2_LL[T1sp, T2sp] extends MyTuple2[T1sp,T2sp] {
    def <init>(t1: T1sp,t2: T2sp): miniboxing.tests.compile.MyTuple2_LL[T1sp,T2sp] // is a specialized implementation of constructor MyTuple2
    private[this] val t1: T1sp                                             // is a specialized implementation of value t1
    private[this] val t2: T2sp                                             // is a specialized implementation of value t2
    val t1(): T1sp                                                         // is a setter or getter for value t1
    val t1_JJ(val T1_TypeTag: Byte,val T2_TypeTag: Byte): T1sp @storage[Long] // is a forwarder to the specialized member
    val t1_JL(val T1_TypeTag: Byte): T1sp @storage[Long]                   // is a forwarder to the specialized member
    val t1_LJ(val T2_TypeTag: Byte): T1sp                                  // is a forwarder to the specialized member
    val t2(): T2sp                                                         // is a setter or getter for value t2
    val t2_JJ(val T1_TypeTag: Byte,val T2_TypeTag: Byte): T2sp @storage[Long] // is a forwarder to the specialized member
    val t2_JL(val T1_TypeTag: Byte): T2sp                                  // is a forwarder to the specialized member
    val t2_LJ(val T2_TypeTag: Byte): T2sp @storage[Long]                   // is a forwarder to the specialized member
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[Now checking: minibox-commit]