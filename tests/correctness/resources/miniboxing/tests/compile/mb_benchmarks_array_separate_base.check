[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.separate {
  abstract trait MBResizableArray[@miniboxed T] extends Object {
    final <stable> <accessor> def initialSize(): Int;
    final <stable> <accessor> def initialSize_J(T_TypeTag: Byte): Int;
    <accessor> def size(): Int;
    <accessor> def size_J(T_TypeTag: Byte): Int;
    <accessor> def size_=(x$1: Int): Unit;
    <accessor> def size_J_=(T_TypeTag: Byte, x$1: Int): Unit;
    <accessor> def elemCount(): Int;
    <accessor> def elemCount_J(T_TypeTag: Byte): Int;
    <accessor> def elemCount_=(x$1: Int): Unit;
    <accessor> def elemCount_J_=(T_TypeTag: Byte, x$1: Int): Unit;
    <accessor> def array(): Array[T];
    <accessor> def array_J(T_TypeTag: Byte): Array[T];
    <accessor> def array_=(x$1: Array[T]): Unit;
    <accessor> def array_J_=(T_TypeTag: Byte, x$1: Array[T]): Unit;
    <accessor> def newarray(): Array[T];
    <accessor> def newarray_J(T_TypeTag: Byte): Array[T];
    <accessor> def newarray_=(x$1: Array[T]): Unit;
    <accessor> def newarray_J_=(T_TypeTag: Byte, x$1: Array[T]): Unit;
    def extend(): Unit;
    def extend_J(T_TypeTag: Byte): Unit;
    def add(elem: T): Unit;
    def add_J(T_TypeTag: Byte, elem: Long): Unit;
    def reverse(): Unit;
    def reverse_J(T_TypeTag: Byte): Unit;
    def contains(elem: T): Boolean;
    def contains_J(T_TypeTag: Byte, elem: Long): Boolean;
    def length(): Int;
    def length_J(T_TypeTag: Byte): Int;
    @inline final def setElement(p: Int, t: T): Unit;
    @inline final def setElement_J(T_TypeTag: Byte, p: Int, t: Long): Unit;
    @inline final def getElement(p: Int): T;
    @inline final def getElement_J(T_TypeTag: Byte, p: Int): Long;
    override def toString(): String;
    override def toString_J(T_TypeTag: Byte): String
  };
  class MBResizableArray_J[Tsp] extends Object with miniboxing.tests.compile.separate.MBResizableArray[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag: Byte = _;
    <paramaccessor> private[this] val mf: scala.reflect.Manifest[Tsp] = _;
    def <init>(miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag: Byte, mf: scala.reflect.Manifest[Tsp]): miniboxing.tests.compile.separate.MBResizableArray_J[Tsp] = {
      MBResizableArray_J.super.<init>();
      ()
    };
    final private[this] val initialSize: Int = 4;
    final <stable> <accessor> def initialSize(): Int = 4;
    final <stable> <accessor> def initialSize_J(T_TypeTag: Byte): Int = 4;
    private[this] var size: Int = 4;
    <accessor> def size(): Int = MBResizableArray_J.this.size_J(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag);
    <accessor> def size_J(T_TypeTag: Byte): Int = MBResizableArray_J.this.size;
    <accessor> def size_=(x$1: Int): Unit = MBResizableArray_J.this.size_J_=(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag, x$1);
    <accessor> def size_J_=(T_TypeTag: Byte, x$1: Int): Unit = MBResizableArray_J.this.size = x$1;
    private[this] var elemCount: Int = 0;
    <accessor> def elemCount(): Int = MBResizableArray_J.this.elemCount_J(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag);
    <accessor> def elemCount_J(T_TypeTag: Byte): Int = MBResizableArray_J.this.elemCount;
    <accessor> def elemCount_=(x$1: Int): Unit = MBResizableArray_J.this.elemCount_J_=(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag, x$1);
    <accessor> def elemCount_J_=(T_TypeTag: Byte, x$1: Int): Unit = MBResizableArray_J.this.elemCount = x$1;
    private[this] var array: Array[Tsp] = MiniboxArray.this.mbarray_new[Tsp](4, MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag).asInstanceOf[Array[Tsp]]();
    <accessor> def array(): Array[Tsp] = MBResizableArray_J.this.array_J(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag);
    <accessor> def array_J(T_TypeTag: Byte): Array[Tsp] = MBResizableArray_J.this.array;
    <accessor> def array_=(x$1: Array[Tsp]): Unit = MBResizableArray_J.this.array_J_=(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag, x$1);
    <accessor> def array_J_=(T_TypeTag: Byte, x$1: Array[Tsp]): Unit = MBResizableArray_J.this.array = x$1;
    private[this] var newarray: Array[Tsp] = _;
    <accessor> def newarray(): Array[Tsp] = MBResizableArray_J.this.newarray_J(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag);
    <accessor> def newarray_J(T_TypeTag: Byte): Array[Tsp] = MBResizableArray_J.this.newarray;
    <accessor> def newarray_=(x$1: Array[Tsp]): Unit = MBResizableArray_J.this.newarray_J_=(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag, x$1);
    <accessor> def newarray_J_=(T_TypeTag: Byte, x$1: Array[Tsp]): Unit = MBResizableArray_J.this.newarray = x$1;
    def extend(): Unit = MBResizableArray_J.this.extend_J(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag);
    def extend_J(T_TypeTag: Byte): Unit = if (MBResizableArray_J.this.elemCount_J(T_TypeTag).==(MBResizableArray_J.this.size_J(T_TypeTag)))
      {
        var pos: Int = 0;
        MBResizableArray_J.this.newarray_J_=(T_TypeTag, MiniboxArray.this.mbarray_new[Tsp](2.*(MBResizableArray_J.this.size_J(T_TypeTag)), T_TypeTag).asInstanceOf[Array[Tsp]]());
        while$1(){
          if (pos.<(MBResizableArray_J.this.size_J(T_TypeTag)))
            {
              {
                MBResizableArray_J.this.newarray_J(T_TypeTag).update(pos, MBResizableArray_J.this.array_J(T_TypeTag).apply(pos));
                pos = pos.+(1)
              };
              while$1()
            }
          else
            ()
        };
        MBResizableArray_J.this.array_J_=(T_TypeTag, MBResizableArray_J.this.newarray_J(T_TypeTag));
        MBResizableArray_J.this.size_J_=(T_TypeTag, MBResizableArray_J.this.size_J(T_TypeTag).*(2))
      }
    else
      ();
    def add(elem: Tsp): Unit = MBResizableArray_J.this.add_J(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](elem, MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag));
    def add_J(T_TypeTag: Byte, elem: Long): Unit = {
      MBResizableArray_J.this.extend_J(T_TypeTag);
      MiniboxArray.this.mbarray_update_minibox(MBResizableArray_J.this.array_J(T_TypeTag), MBResizableArray_J.this.elemCount_J(T_TypeTag), elem, T_TypeTag);
      MBResizableArray_J.this.elemCount_J_=(T_TypeTag, MBResizableArray_J.this.elemCount_J(T_TypeTag).+(1))
    };
    def reverse(): Unit = MBResizableArray_J.this.reverse_J(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag);
    def reverse_J(T_TypeTag: Byte): Unit = {
      var pos: Int = 0;
      while$2(){
        if (pos.*(2).<(MBResizableArray_J.this.elemCount_J(T_TypeTag)))
          {
            {
              val tmp1: Long = MBResizableArray_J.this.getElement_J(T_TypeTag, pos);
              val tmp2: Long = MBResizableArray_J.this.getElement_J(T_TypeTag, MBResizableArray_J.this.elemCount_J(T_TypeTag).-(pos).-(1));
              MBResizableArray_J.this.setElement_J(T_TypeTag, pos, tmp2);
              MBResizableArray_J.this.setElement_J(T_TypeTag, MBResizableArray_J.this.elemCount_J(T_TypeTag).-(pos).-(1), tmp1);
              pos = pos.+(1)
            };
            while$2()
          }
        else
          ()
      }
    };
    def contains(elem: Tsp): Boolean = MBResizableArray_J.this.contains_J(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](elem, MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag));
    def contains_J(T_TypeTag: Byte, elem: Long): Boolean = {
      var pos: Int = 0;
      while$3(){
        if (pos.<(MBResizableArray_J.this.elemCount_J(T_TypeTag)))
          {
            {
              if (MiniboxDispatch.this.mboxed_eqeq_notag(MBResizableArray_J.this.getElement_J(T_TypeTag, pos), elem))
                return true
              else
                ();
              pos = pos.+(1)
            };
            while$3()
          }
        else
          ()
      };
      return false
    };
    def length(): Int = MBResizableArray_J.this.length_J(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag);
    def length_J(T_TypeTag: Byte): Int = MBResizableArray_J.this.elemCount_J(T_TypeTag);
    @inline final def setElement(p: Int, t: Tsp): Unit = MBResizableArray_J.this.setElement_J(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag, p, MiniboxConversions.this.box2minibox_tt[Tsp](t, MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag));
    @inline final def setElement_J(T_TypeTag: Byte, p: Int, t: Long): Unit = MiniboxArray.this.mbarray_update_minibox(MBResizableArray_J.this.array_J(T_TypeTag), p, t, T_TypeTag);
    @inline final def getElement(p: Int): Tsp = MiniboxConversions.this.minibox2box[Tsp](MBResizableArray_J.this.getElement_J(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag, p), MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag);
    @inline final def getElement_J(T_TypeTag: Byte, p: Int): Long = MiniboxArray.this.mbarray_apply_minibox(MBResizableArray_J.this.array_J(T_TypeTag), p, T_TypeTag);
    override def toString(): String = MBResizableArray_J.this.toString_J(MBResizableArray_J.this.miniboxing|tests|compile|separate|MBResizableArray_J|T_TypeTag);
    override def toString_J(T_TypeTag: Byte): String = {
      var pos: Int = 0;
      var ret: String = "";
      while$4(){
        if (pos.<(MBResizableArray_J.this.elemCount_J(T_TypeTag)))
          {
            {
              ret = ret.+(MiniboxDispatch.this.mboxed_toString(MBResizableArray_J.this.getElement_J(T_TypeTag, pos), T_TypeTag).+(", "));
              pos = pos.+(1)
            };
            while$4()
          }
        else
          ()
      };
      ret
    }
  };
  class MBResizableArray_L[Tsp] extends Object with miniboxing.tests.compile.separate.MBResizableArray[Tsp] {
    <paramaccessor> private[this] val mf: scala.reflect.Manifest[Tsp] = _;
    def <init>(mf: scala.reflect.Manifest[Tsp]): miniboxing.tests.compile.separate.MBResizableArray_L[Tsp] = {
      MBResizableArray_L.super.<init>();
      ()
    };
    final private[this] val initialSize: Int = 4;
    final <stable> <accessor> def initialSize(): Int = 4;
    final <stable> <accessor> def initialSize_J(T_TypeTag: Byte): Int = 4;
    private[this] var size: Int = 4;
    <accessor> def size(): Int = MBResizableArray_L.this.size;
    <accessor> def size_J(T_TypeTag: Byte): Int = MBResizableArray_L.this.size();
    <accessor> def size_=(x$1: Int): Unit = MBResizableArray_L.this.size = x$1;
    <accessor> def size_J_=(T_TypeTag: Byte, x$1: Int): Unit = MBResizableArray_L.this.size_=(x$1);
    private[this] var elemCount: Int = 0;
    <accessor> def elemCount(): Int = MBResizableArray_L.this.elemCount;
    <accessor> def elemCount_J(T_TypeTag: Byte): Int = MBResizableArray_L.this.elemCount();
    <accessor> def elemCount_=(x$1: Int): Unit = MBResizableArray_L.this.elemCount = x$1;
    <accessor> def elemCount_J_=(T_TypeTag: Byte, x$1: Int): Unit = MBResizableArray_L.this.elemCount_=(x$1);
    private[this] var array: Array[Tsp] = MBResizableArray_L.this.mf.newArray(4);
    <accessor> def array(): Array[Tsp] = MBResizableArray_L.this.array;
    <accessor> def array_J(T_TypeTag: Byte): Array[Tsp] = MBResizableArray_L.this.array();
    <accessor> def array_=(x$1: Array[Tsp]): Unit = MBResizableArray_L.this.array = x$1;
    <accessor> def array_J_=(T_TypeTag: Byte, x$1: Array[Tsp]): Unit = MBResizableArray_L.this.array_=(x$1);
    private[this] var newarray: Array[Tsp] = _;
    <accessor> def newarray(): Array[Tsp] = MBResizableArray_L.this.newarray;
    <accessor> def newarray_J(T_TypeTag: Byte): Array[Tsp] = MBResizableArray_L.this.newarray();
    <accessor> def newarray_=(x$1: Array[Tsp]): Unit = MBResizableArray_L.this.newarray = x$1;
    <accessor> def newarray_J_=(T_TypeTag: Byte, x$1: Array[Tsp]): Unit = MBResizableArray_L.this.newarray_=(x$1);
    def extend(): Unit = if (MBResizableArray_L.this.elemCount().==(MBResizableArray_L.this.size()))
      {
        var pos: Int = 0;
        MBResizableArray_L.this.newarray_=(MBResizableArray_L.this.mf.newArray(2.*(MBResizableArray_L.this.size())));
        while$1(){
          if (pos.<(MBResizableArray_L.this.size()))
            {
              {
                MBResizableArray_L.this.newarray().update(pos, MBResizableArray_L.this.array().apply(pos));
                pos = pos.+(1)
              };
              while$1()
            }
          else
            ()
        };
        MBResizableArray_L.this.array_=(MBResizableArray_L.this.newarray());
        MBResizableArray_L.this.size_=(MBResizableArray_L.this.size().*(2))
      }
    else
      ();
    def extend_J(T_TypeTag: Byte): Unit = MBResizableArray_L.this.extend();
    def add(elem: Tsp): Unit = {
      MBResizableArray_L.this.extend();
      MBResizableArray_L.this.array().update(MBResizableArray_L.this.elemCount(), elem);
      MBResizableArray_L.this.elemCount_=(MBResizableArray_L.this.elemCount().+(1))
    };
    def add_J(T_TypeTag: Byte, elem: Long): Unit = MBResizableArray_L.this.add(MiniboxConversions.this.minibox2box[Tsp](elem, T_TypeTag));
    def reverse(): Unit = {
      var pos: Int = 0;
      while$2(){
        if (pos.*(2).<(MBResizableArray_L.this.elemCount()))
          {
            {
              val tmp1: Tsp = MBResizableArray_L.this.getElement(pos);
              val tmp2: Tsp = MBResizableArray_L.this.getElement(MBResizableArray_L.this.elemCount().-(pos).-(1));
              MBResizableArray_L.this.setElement(pos, tmp2);
              MBResizableArray_L.this.setElement(MBResizableArray_L.this.elemCount().-(pos).-(1), tmp1);
              pos = pos.+(1)
            };
            while$2()
          }
        else
          ()
      }
    };
    def reverse_J(T_TypeTag: Byte): Unit = MBResizableArray_L.this.reverse();
    def contains(elem: Tsp): Boolean = {
      var pos: Int = 0;
      while$3(){
        if (pos.<(MBResizableArray_L.this.elemCount()))
          {
            {
              if (MBResizableArray_L.this.getElement(pos).==(elem))
                return true
              else
                ();
              pos = pos.+(1)
            };
            while$3()
          }
        else
          ()
      };
      return false
    };
    def contains_J(T_TypeTag: Byte, elem: Long): Boolean = MBResizableArray_L.this.contains(MiniboxConversions.this.minibox2box[Tsp](elem, T_TypeTag));
    def length(): Int = MBResizableArray_L.this.elemCount();
    def length_J(T_TypeTag: Byte): Int = MBResizableArray_L.this.length();
    @inline final def setElement(p: Int, t: Tsp): Unit = MBResizableArray_L.this.array().update(p, t);
    @inline final def setElement_J(T_TypeTag: Byte, p: Int, t: Long): Unit = MBResizableArray_L.this.setElement(p, MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag));
    @inline final def getElement(p: Int): Tsp = MBResizableArray_L.this.array().apply(p);
    @inline final def getElement_J(T_TypeTag: Byte, p: Int): Long = MiniboxConversions.this.box2minibox_tt[Tsp](MBResizableArray_L.this.getElement(p), T_TypeTag);
    override def toString(): String = {
      var pos: Int = 0;
      var ret: String = "";
      while$4(){
        if (pos.<(MBResizableArray_L.this.elemCount()))
          {
            {
              ret = ret.+(MBResizableArray_L.this.getElement(pos).toString().+(", "));
              pos = pos.+(1)
            };
            while$4()
          }
        else
          ()
      };
      ret
    };
    override def toString_J(T_TypeTag: Byte): String = MBResizableArray_L.this.toString()
  }
}
[Now checking: minibox-commit]