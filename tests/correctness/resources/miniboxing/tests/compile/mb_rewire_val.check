[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait ArgumentRewire[@miniboxed T] extends Object {
    def test(t: T): T;
    def test_J(T_TypeTag: Byte, t: Long): Long
  };
  class ArgumentRewire_J[Tsp] extends Object with miniboxing.tests.compile.ArgumentRewire[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|ArgumentRewire_J|T_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|ArgumentRewire_J|T_TypeTag: Byte): miniboxing.tests.compile.ArgumentRewire_J[Tsp] = {
      ArgumentRewire_J.super.<init>();
      ()
    };
    def test(t: Tsp): Tsp = MiniboxConversions.this.minibox2box[Tsp](ArgumentRewire_J.this.test_J(ArgumentRewire_J.this.miniboxing|tests|compile|ArgumentRewire_J|T_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t, ArgumentRewire_J.this.miniboxing|tests|compile|ArgumentRewire_J|T_TypeTag)), ArgumentRewire_J.this.miniboxing|tests|compile|ArgumentRewire_J|T_TypeTag);
    def test_J(T_TypeTag: Byte, t: Long): Long = {
      scala.this.Predef.println(MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag));
      MiniboxDispatch.this.mboxed_hashCode(t, T_TypeTag);
      MiniboxConversions.this.box2minibox_tt[Tsp](scala.this.Predef.identity[Tsp](MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag)), T_TypeTag)
    }
  };
  class ArgumentRewire_L[Tsp] extends Object with miniboxing.tests.compile.ArgumentRewire[Tsp] {
    def <init>(): miniboxing.tests.compile.ArgumentRewire_L[Tsp] = {
      ArgumentRewire_L.super.<init>();
      ()
    };
    def test(t: Tsp): Tsp = {
      scala.this.Predef.println(t);
      t.hashCode();
      scala.this.Predef.identity[Tsp](t)
    };
    def test_J(T_TypeTag: Byte, t: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](ArgumentRewire_L.this.test(MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag)), T_TypeTag)
  };
  abstract trait LocalRewire[@miniboxed T] extends Object {
    def test(t: T): T;
    def test_J(T_TypeTag: Byte, t: Long): Long
  };
  class LocalRewire_J[Tsp] extends Object with miniboxing.tests.compile.LocalRewire[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|LocalRewire_J|T_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|LocalRewire_J|T_TypeTag: Byte): miniboxing.tests.compile.LocalRewire_J[Tsp] = {
      LocalRewire_J.super.<init>();
      ()
    };
    def test(t: Tsp): Tsp = MiniboxConversions.this.minibox2box[Tsp](LocalRewire_J.this.test_J(LocalRewire_J.this.miniboxing|tests|compile|LocalRewire_J|T_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t, LocalRewire_J.this.miniboxing|tests|compile|LocalRewire_J|T_TypeTag)), LocalRewire_J.this.miniboxing|tests|compile|LocalRewire_J|T_TypeTag);
    def test_J(T_TypeTag: Byte, t: Long): Long = {
      val x: Long = t;
      scala.this.Predef.println(MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag));
      MiniboxDispatch.this.mboxed_hashCode(t, T_TypeTag);
      MiniboxConversions.this.box2minibox_tt[Tsp](scala.this.Predef.identity[Tsp](MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag)), T_TypeTag)
    }
  };
  class LocalRewire_L[Tsp] extends Object with miniboxing.tests.compile.LocalRewire[Tsp] {
    def <init>(): miniboxing.tests.compile.LocalRewire_L[Tsp] = {
      LocalRewire_L.super.<init>();
      ()
    };
    def test(t: Tsp): Tsp = {
      val x: Tsp = t;
      scala.this.Predef.println(t);
      t.hashCode();
      scala.this.Predef.identity[Tsp](t)
    };
    def test_J(T_TypeTag: Byte, t: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](LocalRewire_L.this.test(MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag)), T_TypeTag)
  }
}
[Now checking: minibox-commit]