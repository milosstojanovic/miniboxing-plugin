[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait TR[@miniboxed T] extends Object {
    def foo(t: T): T;
    def foo_J(T_TypeTag: Byte, t: Long): Long;
    def bar(t: miniboxing.tests.compile.TR[T]): T;
    def bar_J(T_TypeTag: Byte, t: miniboxing.tests.compile.TR[T]): Long
  };
  class TR_J[Tsp] extends Object with miniboxing.tests.compile.TR[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|TR_J|T_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|TR_J|T_TypeTag: Byte): miniboxing.tests.compile.TR_J[Tsp] = {
      TR_J.super.<init>();
      ()
    };
    def foo(t: Tsp): Tsp = MiniboxConversions.this.minibox2box[Tsp](TR_J.this.foo_J(TR_J.this.miniboxing|tests|compile|TR_J|T_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t, TR_J.this.miniboxing|tests|compile|TR_J|T_TypeTag)), TR_J.this.miniboxing|tests|compile|TR_J|T_TypeTag);
    def foo_J(T_TypeTag: Byte, t: Long): Long = TR_J.this.foo_J(T_TypeTag, t);
    def bar(t: miniboxing.tests.compile.TR[Tsp]): Tsp = MiniboxConversions.this.minibox2box[Tsp](TR_J.this.bar_J(TR_J.this.miniboxing|tests|compile|TR_J|T_TypeTag, t), TR_J.this.miniboxing|tests|compile|TR_J|T_TypeTag);
    def bar_J(T_TypeTag: Byte, t: miniboxing.tests.compile.TR[Tsp]): Long = t.foo_J(T_TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](scala.this.Predef.???(), T_TypeTag))
  };
  class TR_L[Tsp] extends Object with miniboxing.tests.compile.TR[Tsp] {
    def <init>(): miniboxing.tests.compile.TR_L[Tsp] = {
      TR_L.super.<init>();
      ()
    };
    def foo(t: Tsp): Tsp = TR_L.this.foo(t);
    def foo_J(T_TypeTag: Byte, t: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](TR_L.this.foo(MiniboxConversions.this.minibox2box[Tsp](t, T_TypeTag)), T_TypeTag);
    def bar(t: miniboxing.tests.compile.TR[Tsp]): Tsp = t.foo(scala.this.Predef.???());
    def bar_J(T_TypeTag: Byte, t: miniboxing.tests.compile.TR[Tsp]): Long = MiniboxConversions.this.box2minibox_tt[Tsp](TR_L.this.bar(t), T_TypeTag)
  };
  abstract trait RT[@miniboxed U] extends Object {
    def test(u: U): U;
    def test_J(U_TypeTag: Byte, u: Long): Long
  };
  class RT_J[Usp] extends Object with miniboxing.tests.compile.RT[Usp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|RT_J|U_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|RT_J|U_TypeTag: Byte): miniboxing.tests.compile.RT_J[Usp] = {
      RT_J.super.<init>();
      ()
    };
    def test(u: Usp): Usp = MiniboxConversions.this.minibox2box[Usp](RT_J.this.test_J(RT_J.this.miniboxing|tests|compile|RT_J|U_TypeTag, MiniboxConversions.this.box2minibox_tt[Usp](u, RT_J.this.miniboxing|tests|compile|RT_J|U_TypeTag)), RT_J.this.miniboxing|tests|compile|RT_J|U_TypeTag);
    def test_J(U_TypeTag: Byte, u: Long): Long = {
      val tr: miniboxing.tests.compile.TR[Usp] = new miniboxing.tests.compile.TR_J[Usp](U_TypeTag);
      tr.foo_J(U_TypeTag, u)
    }
  };
  class RT_L[Usp] extends Object with miniboxing.tests.compile.RT[Usp] {
    def <init>(): miniboxing.tests.compile.RT_L[Usp] = {
      RT_L.super.<init>();
      ()
    };
    def test(u: Usp): Usp = {
      val tr: miniboxing.tests.compile.TR[Usp] = new miniboxing.tests.compile.TR_L[Usp]();
      tr.foo(u)
    };
    def test_J(U_TypeTag: Byte, u: Long): Long = MiniboxConversions.this.box2minibox_tt[Usp](RT_L.this.test(MiniboxConversions.this.minibox2box[Usp](u, U_TypeTag)), U_TypeTag)
  };
  object Test extends Object {
    def <init>(): miniboxing.tests.compile.Test.type = {
      Test.super.<init>();
      ()
    };
    def test[T](): T = {
      new miniboxing.tests.compile.TR_J[Int](5).foo_J(5, MiniboxConversions.this.int2minibox(3));
      new miniboxing.tests.compile.TR_L[String]().foo("xxx");
      new miniboxing.tests.compile.TR_L[T]().foo(scala.this.Predef.???())
    }
  }
}
[Now checking: minibox-commit]