Specializing class CC...
  // interface:
  abstract trait CC[T] extends Object {
    class DD[U] extends Object
    def test(): CC.this.DD[T]
    def test_J(val T_TypeTag: Byte): CC.this.DD[T]
  }
  // specialized class:
  class CC_J[Tsp] extends CC[Tsp] {
    def <init>(val miniboxing|tests|compile|nested|CC_J|T_TypeTag: Byte,c: Tsp @storage[Long]): miniboxing.tests.compile.nested.CC_J[Tsp] // is a specialized implementation of constructor CC
    def test(): CC_J.this.DD[Tsp]                                          // is a forwarder to the specialized member
    def test_J(val T_TypeTag: Byte): CC_J.this.DD[Tsp]                     // is a specialized implementation of method test
    private[this] val c: Tsp @storage[Long]                                // is a specialized implementation of value c
    private[this] val miniboxing|tests|compile|nested|CC_J|T_TypeTag: Byte // is a type tag
  }
  // specialized class:
  class CC_L[Tsp] extends CC[Tsp] {
    def <init>(c: Tsp): miniboxing.tests.compile.nested.CC_L[Tsp]          // is a specialized implementation of constructor CC
    def test(): CC_L.this.DD[Tsp]                                          // is a specialized implementation of method test
    def test_J(val T_TypeTag: Byte): CC_L.this.DD[Tsp]                     // is a forwarder to the specialized member
    private[this] val c: Tsp                                               // is a specialized implementation of value c
  }
Specializing class DD...
  // interface:
  abstract trait DD[U] extends Object {
  }
  // specialized class:
  class DD_J[Usp] extends CC.this.DD[Usp] {
    def <init>(val miniboxing|tests|compile|nested|CC|DD_J|U_TypeTag: Byte,d: Usp @storage[Long]): CC.this.DD_J[Usp] // is a specialized implementation of constructor DD
    private[this] val d: Usp @storage[Long]                                // is a specialized implementation of value d
    private[this] val miniboxing|tests|compile|nested|CC|DD_J|U_TypeTag: Byte // is a type tag
  }
  // specialized class:
  class DD_L[Usp] extends CC.this.DD[Usp] {
    def <init>(d: Usp): CC.this.DD_L[Usp]                                  // is a specialized implementation of constructor DD
    private[this] val d: Usp                                               // is a specialized implementation of value d
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.nested {
  abstract trait CC[@miniboxed T] extends Object {
    abstract trait DD[@miniboxed U] extends Object;
    class DD_J[Usp] extends Object with CC.this.DD[Usp] {
      <paramaccessor> private[this] val miniboxing|tests|compile|nested|CC|DD_J|U_TypeTag: Byte = _;
      <paramaccessor> private[this] val d: Long = _;
      def <init>(miniboxing|tests|compile|nested|CC|DD_J|U_TypeTag: Byte, d: Long): CC.this.DD_J[Usp] = {
        DD_J.super.<init>();
        ()
      }
    };
    class DD_L[Usp] extends Object with CC.this.DD[Usp] {
      <paramaccessor> private[this] val d: Usp = _;
      def <init>(d: Usp): CC.this.DD_L[Usp] = {
        DD_L.super.<init>();
        ()
      }
    };
    def test(): CC.this.DD[T];
    def test_J(T_TypeTag: Byte): CC.this.DD[T]
  };
  class CC_J[Tsp] extends Object with miniboxing.tests.compile.nested.CC[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested|CC_J|T_TypeTag: Byte = _;
    <paramaccessor> private[this] val c: Long = _;
    def <init>(miniboxing|tests|compile|nested|CC_J|T_TypeTag: Byte, c: Long): miniboxing.tests.compile.nested.CC_J[Tsp] = {
      CC_J.super.<init>();
      ()
    };
    def test(): CC_J.this.DD[Tsp] = CC_J.this.test_J(CC_J.this.miniboxing|tests|compile|nested|CC_J|T_TypeTag);
    def test_J(T_TypeTag: Byte): CC_J.this.DD[Tsp] = new CC_J.this.DD_J[Tsp](T_TypeTag, CC_J.this.c)
  };
  class CC_L[Tsp] extends Object with miniboxing.tests.compile.nested.CC[Tsp] {
    <paramaccessor> private[this] val c: Tsp = _;
    def <init>(c: Tsp): miniboxing.tests.compile.nested.CC_L[Tsp] = {
      CC_L.super.<init>();
      ()
    };
    def test(): CC_L.this.DD[Tsp] = new CC_L.this.DD_L[Tsp](CC_L.this.c);
    def test_J(T_TypeTag: Byte): CC_L.this.DD[Tsp] = CC_L.this.test()
  }
}
[Now checking: minibox-commit]