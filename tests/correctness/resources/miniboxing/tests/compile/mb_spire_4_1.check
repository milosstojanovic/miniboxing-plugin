Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.spire4.var1 {
  abstract trait Dist[@miniboxed A] extends Object { self: miniboxing.tests.compile.spire4.var1.Dist[A] =>
    def sample[CC[A] >: [A]Nothing <: [A]Iterable[A]](n: Int, a: A): CC[A];
    def sample_J[CC[A] >: [A]Nothing <: [A]Iterable[A]](A_TypeTag: Byte, n: Int, a: Long): CC[A]
  };
  abstract trait Dist_J[Asp] extends Object with miniboxing.tests.compile.spire4.var1.Dist[Asp] {
    def miniboxing|tests|compile|spire4|var1|Dist_J|A_TypeTag(): Byte;
    def sample[CC[A] >: [A]Nothing <: [A]Iterable[A]](n: Int, a: Asp): CC[Asp] = Dist_J.this.sample_J[CC](Dist_J.this.miniboxing|tests|compile|spire4|var1|Dist_J|A_TypeTag(), n, MiniboxConversions.this.box2minibox_tt[Asp](a, Dist_J.this.miniboxing|tests|compile|spire4|var1|Dist_J|A_TypeTag()));
    def sample_J[CC[A] >: [A]Nothing <: [A]Iterable[A]](A_TypeTag: Byte, n: Int, a: Long): CC[Asp] = scala.this.Predef.???()
  };
  abstract trait Dist_L[Asp] extends Object with miniboxing.tests.compile.spire4.var1.Dist[Asp] {
    def sample[CC[A] >: [A]Nothing <: [A]Iterable[A]](n: Int, a: Asp): CC[Asp] = scala.this.Predef.???();
    def sample_J[CC[A] >: [A]Nothing <: [A]Iterable[A]](A_TypeTag: Byte, n: Int, a: Long): CC[Asp] = Dist_L.this.sample[CC](n, MiniboxConversions.this.minibox2box[Asp](a, A_TypeTag))
  }
}