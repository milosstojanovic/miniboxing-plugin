Specializing class UhOh1...
  // interface:
  abstract trait UhOh1[X, Y] extends Object {
    def foo(x: X,y: Y): X
    def foo_J(val X_TypeTag: Byte,x: X @storage[Long],y: Y): X @storage[Long]
  }
  // specialized class:
  class UhOh1_J[Xsp, Ysp] extends UhOh1[Xsp,Ysp] {
    def <init>(val miniboxing|tests|compile|UhOh1_J|X_TypeTag: Byte): miniboxing.tests.compile.UhOh1_J[Xsp,Ysp] // is a specialized implementation of constructor UhOh1
    def foo(x: Xsp,y: Ysp): Xsp                                            // is a forwarder to the specialized member
    def foo_J(val X_TypeTag: Byte,x: Xsp @storage[Long],y: Ysp): Xsp @storage[Long] // is a specialized implementation of method foo
    private[this] val miniboxing|tests|compile|UhOh1_J|X_TypeTag: Byte     // is a type tag
  }
  // specialized class:
  class UhOh1_L[Xsp, Ysp] extends UhOh1[Xsp,Ysp] {
    def <init>(): miniboxing.tests.compile.UhOh1_L[Xsp,Ysp]                // is a specialized implementation of constructor UhOh1
    def foo(x: Xsp,y: Ysp): Xsp                                            // is a specialized implementation of method foo
    def foo_J(val X_TypeTag: Byte,x: Xsp @storage[Long],y: Ysp): Xsp @storage[Long] // is a forwarder to the specialized member
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait UhOh1[@miniboxed X, Y] extends Object {
    def foo(x: X, y: Y): X;
    def foo_J(X_TypeTag: Byte, x: Long, y: Y): Long
  };
  class UhOh1_J[Xsp, Ysp] extends Object with miniboxing.tests.compile.UhOh1[Xsp,Ysp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|UhOh1_J|X_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|UhOh1_J|X_TypeTag: Byte): miniboxing.tests.compile.UhOh1_J[Xsp,Ysp] = {
      UhOh1_J.super.<init>();
      ()
    };
    def foo(x: Xsp, y: Ysp): Xsp = MiniboxConversions.this.minibox2box[Xsp](UhOh1_J.this.foo_J(UhOh1_J.this.miniboxing|tests|compile|UhOh1_J|X_TypeTag, MiniboxConversions.this.box2minibox_tt[Xsp](x, UhOh1_J.this.miniboxing|tests|compile|UhOh1_J|X_TypeTag), y), UhOh1_J.this.miniboxing|tests|compile|UhOh1_J|X_TypeTag);
    def foo_J(X_TypeTag: Byte, x: Long, y: Ysp): Long = UhOh1_J.this.foo_J(X_TypeTag, x, y)
  };
  class UhOh1_L[Xsp, Ysp] extends Object with miniboxing.tests.compile.UhOh1[Xsp,Ysp] {
    def <init>(): miniboxing.tests.compile.UhOh1_L[Xsp,Ysp] = {
      UhOh1_L.super.<init>();
      ()
    };
    def foo(x: Xsp, y: Ysp): Xsp = UhOh1_L.this.foo(x, y);
    def foo_J(X_TypeTag: Byte, x: Long, y: Ysp): Long = MiniboxConversions.this.box2minibox_tt[Xsp](UhOh1_L.this.foo(MiniboxConversions.this.minibox2box[Xsp](x, X_TypeTag), y), X_TypeTag)
  }
}
[Now checking: minibox-commit]