Miniboxing plugin warning: The two-way transformation (with long and double as storage types) has become default in version 0.4 version of the miniboxing plugin, so there is no need to specify it in the command line
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.bug51 {
  abstract trait C[@miniboxed T] extends Object {
    <stable> <accessor> <paramaccessor> def t(): T;
    <stable> <accessor> def t_J(T_TypeTag: Byte): Long;
    def foo[@miniboxed U](u: U): Boolean;
    def foo_n_J[U](U_TypeTag: Byte, u: Long): Boolean
  };
  class C_J[Tsp] extends Object with miniboxing.tests.compile.bug51.C[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|bug51|C_J|T_TypeTag: Byte = _;
    <paramaccessor> private[this] val t: Long = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = MiniboxConversions.this.minibox2box[Tsp](C_J.this.t_J(C_J.this.miniboxing|tests|compile|bug51|C_J|T_TypeTag), C_J.this.miniboxing|tests|compile|bug51|C_J|T_TypeTag);
    <stable> <accessor> def t_J(T_TypeTag: Byte): Long = C_J.this.t;
    def <init>(miniboxing|tests|compile|bug51|C_J|T_TypeTag: Byte, t: Long): miniboxing.tests.compile.bug51.C_J[Tsp] = {
      C_J.super.<init>();
      ()
    };
    def foo[@miniboxed U](u: U): Boolean = MiniboxDispatch.this.mboxed_eqeq_other(C_J.this.t_J(C_J.this.miniboxing|tests|compile|bug51|C_J|T_TypeTag), C_J.this.miniboxing|tests|compile|bug51|C_J|T_TypeTag, u);
    def foo_n_J[U](U_TypeTag: Byte, u: Long): Boolean = MiniboxDispatch.this.mboxed_eqeq_tag(C_J.this.t_J(C_J.this.miniboxing|tests|compile|bug51|C_J|T_TypeTag), C_J.this.miniboxing|tests|compile|bug51|C_J|T_TypeTag, u, U_TypeTag)
  };
  class C_L[Tsp] extends Object with miniboxing.tests.compile.bug51.C[Tsp] {
    <paramaccessor> private[this] val t: Tsp = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = C_L.this.t;
    <stable> <accessor> def t_J(T_TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](C_L.this.t(), T_TypeTag);
    def <init>(t: Tsp): miniboxing.tests.compile.bug51.C_L[Tsp] = {
      C_L.super.<init>();
      ()
    };
    def foo[@miniboxed U](u: U): Boolean = C_L.this.t().==(u);
    def foo_n_J[U](U_TypeTag: Byte, u: Long): Boolean = C_L.this.t().==(MiniboxConversions.this.minibox2box[U](u, U_TypeTag))
  }
}
[Now checking: minibox-commit]