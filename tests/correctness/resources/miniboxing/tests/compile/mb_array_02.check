newSource1.scala:11: warning: The following code instantiating an `MbArray` object cannot be optimized since the type argument is not a primitive type (like Int), a miniboxed type parameter or a subtype of AnyRef. This means that primitive types could end up boxed:
  val mba4 = MbArray.empty[Any](10)
                     ^
newSource1.scala:12: warning: The following code instantiating an `MbArray` object cannot be optimized since the type argument is not a primitive type (like Int), a miniboxed type parameter or a subtype of AnyRef. This means that primitive types could end up boxed:
  val mba5 = MbArray.empty[F forSome { type F }](10)
                     ^
newSource1.scala:13: warning: The following code instantiating an `MbArray` object cannot be optimized since the type argument is not a primitive type (like Int), a miniboxed type parameter or a subtype of AnyRef. This means that primitive types could end up boxed:
  def bar[V] = MbArray.empty[V](10)
                       ^
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.mbarray02 {
  object Test extends Object with App {
    def <init>(): miniboxing.tests.compile.mbarray02.Test.type = {
      Test.super.<init>();
      ()
    };
    private[this] val mba1: MbArray[Int] = MbArrayOpts.this.mbArray_empty_J[Int](10, 5);
    <stable> <accessor> def mba1(): MbArray[Int] = Test.this.mba1;
    private[this] val mba2: MbArray[Double] = MbArrayOpts.this.mbArray_empty_D[Double](10, 8);
    <stable> <accessor> def mba2(): MbArray[Double] = Test.this.mba2;
    private[this] val mba3: MbArray[String] = scala.MbArray.empty[String](10);
    <stable> <accessor> def mba3(): MbArray[String] = Test.this.mba3;
    def foo[@miniboxed T](): MbArray[T] = scala.MbArray.empty[T](10);
    def foo_n_D[T](T_TypeTag: Byte): MbArray[T] = MbArrayOpts.this.mbArray_empty_D[T](10, T_TypeTag);
    def foo_n_J[T](T_TypeTag: Byte): MbArray[T] = MbArrayOpts.this.mbArray_empty_J[T](10, T_TypeTag);
    private[this] val mba4: MbArray[Any] = scala.MbArray.empty[Any](10);
    <stable> <accessor> def mba4(): MbArray[Any] = Test.this.mba4;
    private[this] val mba5: MbArray[F forSome { type F }] = scala.MbArray.empty[F forSome { type F }](10);
    <stable> <accessor> def mba5(): MbArray[F forSome { type F }] = Test.this.mba5;
    def bar[V](): MbArray[V] = scala.MbArray.empty[V](10)
  }
}