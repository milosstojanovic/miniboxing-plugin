Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait TN[@miniboxed T] extends Object {
    <stable> <accessor> <paramaccessor> def t(): T;
    <stable> <accessor> def t_J(T_TypeTag: Byte): Long;
    def foo(): miniboxing.tests.compile.TN[T];
    def foo_J(T_TypeTag: Byte): miniboxing.tests.compile.TN[T]
  };
  class TN_J[Tsp] extends Object with miniboxing.tests.compile.TN[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|TN_J|T_TypeTag: Byte = _;
    <paramaccessor> private[this] val t: Long = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = MiniboxConversions.this.minibox2box[Tsp](TN_J.this.t_J(TN_J.this.miniboxing|tests|compile|TN_J|T_TypeTag), TN_J.this.miniboxing|tests|compile|TN_J|T_TypeTag);
    <stable> <accessor> def t_J(T_TypeTag: Byte): Long = TN_J.this.t;
    def <init>(miniboxing|tests|compile|TN_J|T_TypeTag: Byte, t: Long): miniboxing.tests.compile.TN_J[Tsp] = {
      TN_J.super.<init>();
      ()
    };
    def foo(): miniboxing.tests.compile.TN[Tsp] = TN_J.this.foo_J(TN_J.this.miniboxing|tests|compile|TN_J|T_TypeTag);
    def foo_J(T_TypeTag: Byte): miniboxing.tests.compile.TN[Tsp] = new miniboxing.tests.compile.TN_J[Tsp](T_TypeTag, TN_J.this.t_J(T_TypeTag))
  };
  class TN_L[Tsp] extends Object with miniboxing.tests.compile.TN[Tsp] {
    <paramaccessor> private[this] val t: Tsp = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = TN_L.this.t;
    <stable> <accessor> def t_J(T_TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](TN_L.this.t(), T_TypeTag);
    def <init>(t: Tsp): miniboxing.tests.compile.TN_L[Tsp] = {
      TN_L.super.<init>();
      ()
    };
    def foo(): miniboxing.tests.compile.TN[Tsp] = new miniboxing.tests.compile.TN_L[Tsp](TN_L.this.t());
    def foo_J(T_TypeTag: Byte): miniboxing.tests.compile.TN[Tsp] = TN_L.this.foo()
  };
  object TestNewRewire extends Object {
    def <init>(): miniboxing.tests.compile.TestNewRewire.type = {
      TestNewRewire.super.<init>();
      ()
    };
    def test[T](t: T): String = {
      new miniboxing.tests.compile.TN_J[Int](5, MiniboxConversions.this.int2minibox(1));
      new miniboxing.tests.compile.TN_L[String]("xxx");
      new miniboxing.tests.compile.TN_L[T](t);
      new String("yyy")
    }
  }
}
[Now checking: minibox-commit]