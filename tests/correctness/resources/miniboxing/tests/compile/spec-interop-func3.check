[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.spec.interop.functions3 {
  object Fuctions3 extends Object {
    def <init>(): miniboxing.tests.compile.spec.interop.functions3.Fuctions3.type = {
      Fuctions3.super.<init>();
      ()
    };
    abstract trait F[@miniboxed A, @miniboxed B] extends Object {
      def foo(b: B): Unit;
      def foo_DD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit;
      def foo_DJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit;
      def foo_DL(A_TypeTag: Byte, b: B): Unit;
      def foo_JD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit;
      def foo_JJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit;
      def foo_JL(A_TypeTag: Byte, b: B): Unit;
      def foo_LD(B_TypeTag: Byte, b: Double): Unit;
      def foo_LJ(B_TypeTag: Byte, b: Long): Unit
    };
    class F_DD[Asp, Bsp] extends Object with miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F[Asp,Bsp] {
      <paramaccessor> private[this] val miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DD|A_TypeTag: Byte = _;
      <paramaccessor> private[this] val miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DD|B_TypeTag: Byte = _;
      def <init>(miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DD|A_TypeTag: Byte, miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DD|B_TypeTag: Byte): miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F_DD[Asp,Bsp] = {
        F_DD.super.<init>();
        ()
      };
      def foo(b: Bsp): Unit = F_DD.this.foo_DD(F_DD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DD|A_TypeTag, F_DD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DD|B_TypeTag, MiniboxConversionsDouble.this.box2minibox_tt[Bsp](b, F_DD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DD|B_TypeTag));
      def foo_DD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = {
        val f0: miniboxing.runtime.MiniboxedFunction1[Asp,Asp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Asp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Asp = x
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_double_double[Asp, Asp](A_TypeTag, A_TypeTag, (new anonymous class $anon(): Asp => Asp))
        };
        val f1: miniboxing.runtime.MiniboxedFunction1[Asp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Bsp = MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_double_double[Asp, Bsp](A_TypeTag, B_TypeTag, (new anonymous class $anon(): Asp => Bsp))
        };
        val f2: miniboxing.runtime.MiniboxedFunction1[Asp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_double_long[Asp, Int](A_TypeTag, 5, (new anonymous class $anon(): Asp => Int))
        };
        val f3: miniboxing.runtime.MiniboxedFunction1[Int,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Int = 4
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Int](5, 5, (new anonymous class $anon(): Int => Int))
        };
        val f4: miniboxing.runtime.MiniboxedFunction1[Int,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Bsp = MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_double[Int, Bsp](5, B_TypeTag, (new anonymous class $anon(): Int => Bsp))
        };
        val f5: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function2_opt_bridge_double_double_long[Asp, Bsp, Int](A_TypeTag, B_TypeTag, 5, (new anonymous class $anon(): (Asp, Bsp) => Int))
        };
        val f6: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Bsp = y
          };
          MiniboxedFunctionBridge.this.function2_opt_bridge_double_double_double[Asp, Bsp, Bsp](A_TypeTag, B_TypeTag, B_TypeTag, (new anonymous class $anon(): (Asp, Bsp) => Bsp))
        };
        ()
      };
      def foo_DJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_DD.this.foo_DD(A_TypeTag, B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Long", "Double"));
      def foo_DL(A_TypeTag: Byte, b: Bsp): Unit = F_DD.this.foo_DD(A_TypeTag, F_DD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DD|B_TypeTag, MiniboxConversionsDouble.this.box2minibox_tt[Bsp](b, F_DD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DD|B_TypeTag));
      def foo_JD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_DD.this.foo_DD(A_TypeTag, B_TypeTag, b);
      def foo_JJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_DD.this.foo_DD(A_TypeTag, B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Long", "Double"));
      def foo_JL(A_TypeTag: Byte, b: Bsp): Unit = F_DD.this.foo_DD(A_TypeTag, F_DD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DD|B_TypeTag, MiniboxConversionsDouble.this.box2minibox_tt[Bsp](b, F_DD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DD|B_TypeTag));
      def foo_LD(B_TypeTag: Byte, b: Double): Unit = F_DD.this.foo_DD(F_DD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DD|A_TypeTag, B_TypeTag, b);
      def foo_LJ(B_TypeTag: Byte, b: Long): Unit = F_DD.this.foo_DD(F_DD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DD|A_TypeTag, B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Long", "Double"))
    };
    class F_DJ[Asp, Bsp] extends Object with miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F[Asp,Bsp] {
      <paramaccessor> private[this] val miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DJ|A_TypeTag: Byte = _;
      <paramaccessor> private[this] val miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DJ|B_TypeTag: Byte = _;
      def <init>(miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DJ|A_TypeTag: Byte, miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DJ|B_TypeTag: Byte): miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F_DJ[Asp,Bsp] = {
        F_DJ.super.<init>();
        ()
      };
      def foo(b: Bsp): Unit = F_DJ.this.foo_DJ(F_DJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DJ|A_TypeTag, F_DJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DJ|B_TypeTag, MiniboxConversionsLong.this.box2minibox_tt[Bsp](b, F_DJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DJ|B_TypeTag));
      def foo_DD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_DJ.this.foo_DJ(A_TypeTag, B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Double", "Long"));
      def foo_DJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = {
        val f0: miniboxing.runtime.MiniboxedFunction1[Asp,Asp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Asp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Asp = x
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_double_double[Asp, Asp](A_TypeTag, A_TypeTag, (new anonymous class $anon(): Asp => Asp))
        };
        val f1: miniboxing.runtime.MiniboxedFunction1[Asp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Bsp = MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_double_long[Asp, Bsp](A_TypeTag, B_TypeTag, (new anonymous class $anon(): Asp => Bsp))
        };
        val f2: miniboxing.runtime.MiniboxedFunction1[Asp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_double_long[Asp, Int](A_TypeTag, 5, (new anonymous class $anon(): Asp => Int))
        };
        val f3: miniboxing.runtime.MiniboxedFunction1[Int,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Int = 4
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Int](5, 5, (new anonymous class $anon(): Int => Int))
        };
        val f4: miniboxing.runtime.MiniboxedFunction1[Int,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Bsp = MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Bsp](5, B_TypeTag, (new anonymous class $anon(): Int => Bsp))
        };
        val f5: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function2_opt_bridge_double_long_long[Asp, Bsp, Int](A_TypeTag, B_TypeTag, 5, (new anonymous class $anon(): (Asp, Bsp) => Int))
        };
        val f6: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Bsp = y
          };
          MiniboxedFunctionBridge.this.function2_opt_bridge_double_long_long[Asp, Bsp, Bsp](A_TypeTag, B_TypeTag, B_TypeTag, (new anonymous class $anon(): (Asp, Bsp) => Bsp))
        };
        ()
      };
      def foo_DL(A_TypeTag: Byte, b: Bsp): Unit = F_DJ.this.foo_DJ(A_TypeTag, F_DJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DJ|B_TypeTag, MiniboxConversionsLong.this.box2minibox_tt[Bsp](b, F_DJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DJ|B_TypeTag));
      def foo_JD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_DJ.this.foo_DJ(A_TypeTag, B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Double", "Long"));
      def foo_JJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_DJ.this.foo_DJ(A_TypeTag, B_TypeTag, b);
      def foo_JL(A_TypeTag: Byte, b: Bsp): Unit = F_DJ.this.foo_DJ(A_TypeTag, F_DJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DJ|B_TypeTag, MiniboxConversionsLong.this.box2minibox_tt[Bsp](b, F_DJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DJ|B_TypeTag));
      def foo_LD(B_TypeTag: Byte, b: Double): Unit = F_DJ.this.foo_DJ(F_DJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DJ|A_TypeTag, B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Double", "Long"));
      def foo_LJ(B_TypeTag: Byte, b: Long): Unit = F_DJ.this.foo_DJ(F_DJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DJ|A_TypeTag, B_TypeTag, b)
    };
    class F_DL[Asp, Bsp] extends Object with miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F[Asp,Bsp] {
      <paramaccessor> private[this] val miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DL|A_TypeTag: Byte = _;
      def <init>(miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DL|A_TypeTag: Byte): miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F_DL[Asp,Bsp] = {
        F_DL.super.<init>();
        ()
      };
      def foo(b: Bsp): Unit = F_DL.this.foo_DL(F_DL.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DL|A_TypeTag, b);
      def foo_DD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_DL.this.foo_DL(A_TypeTag, MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_DJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_DL.this.foo_DL(A_TypeTag, MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_DL(A_TypeTag: Byte, b: Bsp): Unit = {
        val f0: miniboxing.runtime.MiniboxedFunction1[Asp,Asp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Asp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Asp = x
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_double_double[Asp, Asp](A_TypeTag, A_TypeTag, (new anonymous class $anon(): Asp => Asp))
        };
        val f1: miniboxing.runtime.MiniboxedFunction1[Asp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Bsp = b
          };
          MiniboxedFunctionBridge.this.function1_bridge[Asp, Bsp]((new anonymous class $anon(): Asp => Bsp))
        };
        val f2: miniboxing.runtime.MiniboxedFunction1[Asp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_double_long[Asp, Int](A_TypeTag, 5, (new anonymous class $anon(): Asp => Int))
        };
        val f3: miniboxing.runtime.MiniboxedFunction1[Int,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Int = 4
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Int](5, 5, (new anonymous class $anon(): Int => Int))
        };
        val f4: miniboxing.runtime.MiniboxedFunction1[Int,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Bsp = b
          };
          MiniboxedFunctionBridge.this.function1_bridge[Int, Bsp]((new anonymous class $anon(): Int => Bsp))
        };
        val f5: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function2_bridge[Asp, Bsp, Int]((new anonymous class $anon(): (Asp, Bsp) => Int))
        };
        val f6: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Bsp = y
          };
          MiniboxedFunctionBridge.this.function2_bridge[Asp, Bsp, Bsp]((new anonymous class $anon(): (Asp, Bsp) => Bsp))
        };
        ()
      };
      def foo_JD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_DL.this.foo_DL(A_TypeTag, MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_JJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_DL.this.foo_DL(A_TypeTag, MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_JL(A_TypeTag: Byte, b: Bsp): Unit = F_DL.this.foo_DL(A_TypeTag, b);
      def foo_LD(B_TypeTag: Byte, b: Double): Unit = F_DL.this.foo_DL(F_DL.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DL|A_TypeTag, MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_LJ(B_TypeTag: Byte, b: Long): Unit = F_DL.this.foo_DL(F_DL.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_DL|A_TypeTag, MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag))
    };
    class F_JD[Asp, Bsp] extends Object with miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F[Asp,Bsp] {
      <paramaccessor> private[this] val miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JD|A_TypeTag: Byte = _;
      <paramaccessor> private[this] val miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JD|B_TypeTag: Byte = _;
      def <init>(miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JD|A_TypeTag: Byte, miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JD|B_TypeTag: Byte): miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F_JD[Asp,Bsp] = {
        F_JD.super.<init>();
        ()
      };
      def foo(b: Bsp): Unit = F_JD.this.foo_JD(F_JD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JD|A_TypeTag, F_JD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JD|B_TypeTag, MiniboxConversionsDouble.this.box2minibox_tt[Bsp](b, F_JD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JD|B_TypeTag));
      def foo_DD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_JD.this.foo_JD(A_TypeTag, B_TypeTag, b);
      def foo_DJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_JD.this.foo_JD(A_TypeTag, B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Long", "Double"));
      def foo_DL(A_TypeTag: Byte, b: Bsp): Unit = F_JD.this.foo_JD(A_TypeTag, F_JD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JD|B_TypeTag, MiniboxConversionsDouble.this.box2minibox_tt[Bsp](b, F_JD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JD|B_TypeTag));
      def foo_JD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = {
        val f0: miniboxing.runtime.MiniboxedFunction1[Asp,Asp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Asp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Asp = x
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Asp, Asp](A_TypeTag, A_TypeTag, (new anonymous class $anon(): Asp => Asp))
        };
        val f1: miniboxing.runtime.MiniboxedFunction1[Asp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Bsp = MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_double[Asp, Bsp](A_TypeTag, B_TypeTag, (new anonymous class $anon(): Asp => Bsp))
        };
        val f2: miniboxing.runtime.MiniboxedFunction1[Asp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Asp, Int](A_TypeTag, 5, (new anonymous class $anon(): Asp => Int))
        };
        val f3: miniboxing.runtime.MiniboxedFunction1[Int,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Int = 4
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Int](5, 5, (new anonymous class $anon(): Int => Int))
        };
        val f4: miniboxing.runtime.MiniboxedFunction1[Int,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Bsp = MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_double[Int, Bsp](5, B_TypeTag, (new anonymous class $anon(): Int => Bsp))
        };
        val f5: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function2_opt_bridge_long_double_long[Asp, Bsp, Int](A_TypeTag, B_TypeTag, 5, (new anonymous class $anon(): (Asp, Bsp) => Int))
        };
        val f6: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Bsp = y
          };
          MiniboxedFunctionBridge.this.function2_opt_bridge_long_double_double[Asp, Bsp, Bsp](A_TypeTag, B_TypeTag, B_TypeTag, (new anonymous class $anon(): (Asp, Bsp) => Bsp))
        };
        ()
      };
      def foo_JJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_JD.this.foo_JD(A_TypeTag, B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Long", "Double"));
      def foo_JL(A_TypeTag: Byte, b: Bsp): Unit = F_JD.this.foo_JD(A_TypeTag, F_JD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JD|B_TypeTag, MiniboxConversionsDouble.this.box2minibox_tt[Bsp](b, F_JD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JD|B_TypeTag));
      def foo_LD(B_TypeTag: Byte, b: Double): Unit = F_JD.this.foo_JD(F_JD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JD|A_TypeTag, B_TypeTag, b);
      def foo_LJ(B_TypeTag: Byte, b: Long): Unit = F_JD.this.foo_JD(F_JD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JD|A_TypeTag, B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Long", "Double"))
    };
    class F_JJ[Asp, Bsp] extends Object with miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F[Asp,Bsp] {
      <paramaccessor> private[this] val miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JJ|A_TypeTag: Byte = _;
      <paramaccessor> private[this] val miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JJ|B_TypeTag: Byte = _;
      def <init>(miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JJ|A_TypeTag: Byte, miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JJ|B_TypeTag: Byte): miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F_JJ[Asp,Bsp] = {
        F_JJ.super.<init>();
        ()
      };
      def foo(b: Bsp): Unit = F_JJ.this.foo_JJ(F_JJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JJ|A_TypeTag, F_JJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JJ|B_TypeTag, MiniboxConversionsLong.this.box2minibox_tt[Bsp](b, F_JJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JJ|B_TypeTag));
      def foo_DD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_JJ.this.foo_JJ(A_TypeTag, B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Double", "Long"));
      def foo_DJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_JJ.this.foo_JJ(A_TypeTag, B_TypeTag, b);
      def foo_DL(A_TypeTag: Byte, b: Bsp): Unit = F_JJ.this.foo_JJ(A_TypeTag, F_JJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JJ|B_TypeTag, MiniboxConversionsLong.this.box2minibox_tt[Bsp](b, F_JJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JJ|B_TypeTag));
      def foo_JD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_JJ.this.foo_JJ(A_TypeTag, B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Double", "Long"));
      def foo_JJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = {
        val f0: miniboxing.runtime.MiniboxedFunction1[Asp,Asp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Asp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Asp = x
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Asp, Asp](A_TypeTag, A_TypeTag, (new anonymous class $anon(): Asp => Asp))
        };
        val f1: miniboxing.runtime.MiniboxedFunction1[Asp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Bsp = MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Asp, Bsp](A_TypeTag, B_TypeTag, (new anonymous class $anon(): Asp => Bsp))
        };
        val f2: miniboxing.runtime.MiniboxedFunction1[Asp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Asp, Int](A_TypeTag, 5, (new anonymous class $anon(): Asp => Int))
        };
        val f3: miniboxing.runtime.MiniboxedFunction1[Int,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Int = 4
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Int](5, 5, (new anonymous class $anon(): Int => Int))
        };
        val f4: miniboxing.runtime.MiniboxedFunction1[Int,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Bsp = MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Bsp](5, B_TypeTag, (new anonymous class $anon(): Int => Bsp))
        };
        val f5: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function2_opt_bridge_long_long_long[Asp, Bsp, Int](A_TypeTag, B_TypeTag, 5, (new anonymous class $anon(): (Asp, Bsp) => Int))
        };
        val f6: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Bsp = y
          };
          MiniboxedFunctionBridge.this.function2_opt_bridge_long_long_long[Asp, Bsp, Bsp](A_TypeTag, B_TypeTag, B_TypeTag, (new anonymous class $anon(): (Asp, Bsp) => Bsp))
        };
        ()
      };
      def foo_JL(A_TypeTag: Byte, b: Bsp): Unit = F_JJ.this.foo_JJ(A_TypeTag, F_JJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JJ|B_TypeTag, MiniboxConversionsLong.this.box2minibox_tt[Bsp](b, F_JJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JJ|B_TypeTag));
      def foo_LD(B_TypeTag: Byte, b: Double): Unit = F_JJ.this.foo_JJ(F_JJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JJ|A_TypeTag, B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Double", "Long"));
      def foo_LJ(B_TypeTag: Byte, b: Long): Unit = F_JJ.this.foo_JJ(F_JJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JJ|A_TypeTag, B_TypeTag, b)
    };
    class F_JL[Asp, Bsp] extends Object with miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F[Asp,Bsp] {
      <paramaccessor> private[this] val miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JL|A_TypeTag: Byte = _;
      def <init>(miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JL|A_TypeTag: Byte): miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F_JL[Asp,Bsp] = {
        F_JL.super.<init>();
        ()
      };
      def foo(b: Bsp): Unit = F_JL.this.foo_JL(F_JL.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JL|A_TypeTag, b);
      def foo_DD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_JL.this.foo_JL(A_TypeTag, MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_DJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_JL.this.foo_JL(A_TypeTag, MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_DL(A_TypeTag: Byte, b: Bsp): Unit = F_JL.this.foo_JL(A_TypeTag, b);
      def foo_JD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_JL.this.foo_JL(A_TypeTag, MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_JJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_JL.this.foo_JL(A_TypeTag, MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_JL(A_TypeTag: Byte, b: Bsp): Unit = {
        val f0: miniboxing.runtime.MiniboxedFunction1[Asp,Asp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Asp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Asp = x
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Asp, Asp](A_TypeTag, A_TypeTag, (new anonymous class $anon(): Asp => Asp))
        };
        val f1: miniboxing.runtime.MiniboxedFunction1[Asp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Bsp = b
          };
          MiniboxedFunctionBridge.this.function1_bridge[Asp, Bsp]((new anonymous class $anon(): Asp => Bsp))
        };
        val f2: miniboxing.runtime.MiniboxedFunction1[Asp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Asp, Int](A_TypeTag, 5, (new anonymous class $anon(): Asp => Int))
        };
        val f3: miniboxing.runtime.MiniboxedFunction1[Int,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Int = 4
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Int](5, 5, (new anonymous class $anon(): Int => Int))
        };
        val f4: miniboxing.runtime.MiniboxedFunction1[Int,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Bsp = b
          };
          MiniboxedFunctionBridge.this.function1_bridge[Int, Bsp]((new anonymous class $anon(): Int => Bsp))
        };
        val f5: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function2_bridge[Asp, Bsp, Int]((new anonymous class $anon(): (Asp, Bsp) => Int))
        };
        val f6: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Bsp = y
          };
          MiniboxedFunctionBridge.this.function2_bridge[Asp, Bsp, Bsp]((new anonymous class $anon(): (Asp, Bsp) => Bsp))
        };
        ()
      };
      def foo_LD(B_TypeTag: Byte, b: Double): Unit = F_JL.this.foo_JL(F_JL.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JL|A_TypeTag, MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_LJ(B_TypeTag: Byte, b: Long): Unit = F_JL.this.foo_JL(F_JL.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_JL|A_TypeTag, MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag))
    };
    class F_LD[Asp, Bsp] extends Object with miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F[Asp,Bsp] {
      <paramaccessor> private[this] val miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LD|B_TypeTag: Byte = _;
      def <init>(miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LD|B_TypeTag: Byte): miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F_LD[Asp,Bsp] = {
        F_LD.super.<init>();
        ()
      };
      def foo(b: Bsp): Unit = F_LD.this.foo_LD(F_LD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LD|B_TypeTag, MiniboxConversionsDouble.this.box2minibox_tt[Bsp](b, F_LD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LD|B_TypeTag));
      def foo_DD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_LD.this.foo_LD(B_TypeTag, b);
      def foo_DJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_LD.this.foo_LD(B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Long", "Double"));
      def foo_DL(A_TypeTag: Byte, b: Bsp): Unit = F_LD.this.foo_LD(F_LD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LD|B_TypeTag, MiniboxConversionsDouble.this.box2minibox_tt[Bsp](b, F_LD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LD|B_TypeTag));
      def foo_JD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_LD.this.foo_LD(B_TypeTag, b);
      def foo_JJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_LD.this.foo_LD(B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Long", "Double"));
      def foo_JL(A_TypeTag: Byte, b: Bsp): Unit = F_LD.this.foo_LD(F_LD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LD|B_TypeTag, MiniboxConversionsDouble.this.box2minibox_tt[Bsp](b, F_LD.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LD|B_TypeTag));
      def foo_LD(B_TypeTag: Byte, b: Double): Unit = {
        val f0: miniboxing.runtime.MiniboxedFunction1[Asp,Asp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Asp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Asp = x
          };
          MiniboxedFunctionBridge.this.function1_bridge[Asp, Asp]((new anonymous class $anon(): Asp => Asp))
        };
        val f1: miniboxing.runtime.MiniboxedFunction1[Asp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Bsp = MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag)
          };
          MiniboxedFunctionBridge.this.function1_bridge[Asp, Bsp]((new anonymous class $anon(): Asp => Bsp))
        };
        val f2: miniboxing.runtime.MiniboxedFunction1[Asp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function1_bridge[Asp, Int]((new anonymous class $anon(): Asp => Int))
        };
        val f3: miniboxing.runtime.MiniboxedFunction1[Int,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Int = 4
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Int](5, 5, (new anonymous class $anon(): Int => Int))
        };
        val f4: miniboxing.runtime.MiniboxedFunction1[Int,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Bsp = MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_double[Int, Bsp](5, B_TypeTag, (new anonymous class $anon(): Int => Bsp))
        };
        val f5: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function2_bridge[Asp, Bsp, Int]((new anonymous class $anon(): (Asp, Bsp) => Int))
        };
        val f6: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Bsp = y
          };
          MiniboxedFunctionBridge.this.function2_bridge[Asp, Bsp, Bsp]((new anonymous class $anon(): (Asp, Bsp) => Bsp))
        };
        ()
      };
      def foo_LJ(B_TypeTag: Byte, b: Long): Unit = F_LD.this.foo_LD(B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Long", "Double"))
    };
    class F_LJ[Asp, Bsp] extends Object with miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F[Asp,Bsp] {
      <paramaccessor> private[this] val miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LJ|B_TypeTag: Byte = _;
      def <init>(miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LJ|B_TypeTag: Byte): miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F_LJ[Asp,Bsp] = {
        F_LJ.super.<init>();
        ()
      };
      def foo(b: Bsp): Unit = F_LJ.this.foo_LJ(F_LJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LJ|B_TypeTag, MiniboxConversionsLong.this.box2minibox_tt[Bsp](b, F_LJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LJ|B_TypeTag));
      def foo_DD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_LJ.this.foo_LJ(B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Double", "Long"));
      def foo_DJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_LJ.this.foo_LJ(B_TypeTag, b);
      def foo_DL(A_TypeTag: Byte, b: Bsp): Unit = F_LJ.this.foo_LJ(F_LJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LJ|B_TypeTag, MiniboxConversionsLong.this.box2minibox_tt[Bsp](b, F_LJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LJ|B_TypeTag));
      def foo_JD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_LJ.this.foo_LJ(B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Double", "Long"));
      def foo_JJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_LJ.this.foo_LJ(B_TypeTag, b);
      def foo_JL(A_TypeTag: Byte, b: Bsp): Unit = F_LJ.this.foo_LJ(F_LJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LJ|B_TypeTag, MiniboxConversionsLong.this.box2minibox_tt[Bsp](b, F_LJ.this.miniboxing|tests|compile|spec|interop|functions3|Fuctions3|F_LJ|B_TypeTag));
      def foo_LD(B_TypeTag: Byte, b: Double): Unit = F_LJ.this.foo_LJ(B_TypeTag, MiniboxConversions.this.unreachableConversion[Nothing]("Double", "Long"));
      def foo_LJ(B_TypeTag: Byte, b: Long): Unit = {
        val f0: miniboxing.runtime.MiniboxedFunction1[Asp,Asp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Asp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Asp = x
          };
          MiniboxedFunctionBridge.this.function1_bridge[Asp, Asp]((new anonymous class $anon(): Asp => Asp))
        };
        val f1: miniboxing.runtime.MiniboxedFunction1[Asp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Bsp = MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag)
          };
          MiniboxedFunctionBridge.this.function1_bridge[Asp, Bsp]((new anonymous class $anon(): Asp => Bsp))
        };
        val f2: miniboxing.runtime.MiniboxedFunction1[Asp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function1_bridge[Asp, Int]((new anonymous class $anon(): Asp => Int))
        };
        val f3: miniboxing.runtime.MiniboxedFunction1[Int,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Int = 4
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Int](5, 5, (new anonymous class $anon(): Int => Int))
        };
        val f4: miniboxing.runtime.MiniboxedFunction1[Int,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Bsp = MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag)
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Bsp](5, B_TypeTag, (new anonymous class $anon(): Int => Bsp))
        };
        val f5: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function2_bridge[Asp, Bsp, Int]((new anonymous class $anon(): (Asp, Bsp) => Int))
        };
        val f6: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Bsp = y
          };
          MiniboxedFunctionBridge.this.function2_bridge[Asp, Bsp, Bsp]((new anonymous class $anon(): (Asp, Bsp) => Bsp))
        };
        ()
      }
    };
    class F_LL[Asp, Bsp] extends Object with miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F[Asp,Bsp] {
      def <init>(): miniboxing.tests.compile.spec.interop.functions3.Fuctions3.F_LL[Asp,Bsp] = {
        F_LL.super.<init>();
        ()
      };
      def foo(b: Bsp): Unit = {
        val f0: miniboxing.runtime.MiniboxedFunction1[Asp,Asp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Asp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Asp = x
          };
          MiniboxedFunctionBridge.this.function1_bridge[Asp, Asp]((new anonymous class $anon(): Asp => Asp))
        };
        val f1: miniboxing.runtime.MiniboxedFunction1[Asp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Bsp = b
          };
          MiniboxedFunctionBridge.this.function1_bridge[Asp, Bsp]((new anonymous class $anon(): Asp => Bsp))
        };
        val f2: miniboxing.runtime.MiniboxedFunction1[Asp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Asp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function1_bridge[Asp, Int]((new anonymous class $anon(): Asp => Int))
        };
        val f3: miniboxing.runtime.MiniboxedFunction1[Int,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Int = 4
          };
          MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Int](5, 5, (new anonymous class $anon(): Int => Int))
        };
        val f4: miniboxing.runtime.MiniboxedFunction1[Int,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Int): Bsp = b
          };
          MiniboxedFunctionBridge.this.function1_bridge[Int, Bsp]((new anonymous class $anon(): Int => Bsp))
        };
        val f5: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Int] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Int] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Int = 3./(0)
          };
          MiniboxedFunctionBridge.this.function2_bridge[Asp, Bsp, Int]((new anonymous class $anon(): (Asp, Bsp) => Int))
        };
        val f6: miniboxing.runtime.MiniboxedFunction2[Asp,Bsp,Bsp] = {
          @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Asp,Bsp,Bsp] with Serializable {
            def <init>(): anonymous class $anon = {
              $anonfun.super.<init>();
              ()
            };
            final def apply(x: Asp, y: Bsp): Bsp = y
          };
          MiniboxedFunctionBridge.this.function2_bridge[Asp, Bsp, Bsp]((new anonymous class $anon(): (Asp, Bsp) => Bsp))
        };
        ()
      };
      def foo_DD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_LL.this.foo(MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_DJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_LL.this.foo(MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_DL(A_TypeTag: Byte, b: Bsp): Unit = F_LL.this.foo(b);
      def foo_JD(A_TypeTag: Byte, B_TypeTag: Byte, b: Double): Unit = F_LL.this.foo(MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_JJ(A_TypeTag: Byte, B_TypeTag: Byte, b: Long): Unit = F_LL.this.foo(MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_JL(A_TypeTag: Byte, b: Bsp): Unit = F_LL.this.foo(b);
      def foo_LD(B_TypeTag: Byte, b: Double): Unit = F_LL.this.foo(MiniboxConversionsDouble.this.minibox2box[Bsp](b, B_TypeTag));
      def foo_LJ(B_TypeTag: Byte, b: Long): Unit = F_LL.this.foo(MiniboxConversionsLong.this.minibox2box[Bsp](b, B_TypeTag))
    };
    def foo(): Unit = {
      val f: miniboxing.runtime.MiniboxedFunction1[Int,Int] = {
        @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,Int] with Serializable {
          def <init>(): anonymous class $anon = {
            $anonfun.super.<init>();
            ()
          };
          final def apply(x: Int): Int = x
        };
        MiniboxedFunctionBridge.this.function1_opt_bridge_long_long[Int, Int](5, 5, (new anonymous class $anon(): Int => Int))
      };
      ()
    }
  }
}
[Now checking: minibox-commit]