Specializing class UhOh...
  // interface:
  abstract trait UhOh[X, Y] extends Object {
    def foo(x: X,y: Y): X
    def foo_J(val X_TypeTag: Byte,x: X @storage[Long],y: Y): X @storage[Long]
  }
  // specialized class:
  class UhOh_J[Xsp, Ysp] extends UhOh[Xsp,Ysp] {
    def <init>(val miniboxing|tests|compile|UhOh_J|X_TypeTag: Byte): miniboxing.tests.compile.UhOh_J[Xsp,Ysp] // is a specialized implementation of constructor UhOh
    def foo(x: Xsp,y: Ysp): Xsp                                            // is a forwarder to the specialized member
    def foo_J(val X_TypeTag: Byte,x: Xsp @storage[Long],y: Ysp): Xsp @storage[Long] // is a specialized implementation of method foo
    private[this] val miniboxing|tests|compile|UhOh_J|X_TypeTag: Byte      // is a type tag
  }
  // specialized class:
  class UhOh_L[Xsp, Ysp] extends UhOh[Xsp,Ysp] {
    def <init>(): miniboxing.tests.compile.UhOh_L[Xsp,Ysp]                 // is a specialized implementation of constructor UhOh
    def foo(x: Xsp,y: Ysp): Xsp                                            // is a specialized implementation of method foo
    def foo_J(val X_TypeTag: Byte,x: Xsp @storage[Long],y: Ysp): Xsp @storage[Long] // is a forwarder to the specialized member
  }
Specializing class OhUh...
  // interface:
  abstract trait OhUh[U] extends Object {
    def test(): U
    def test_J(val U_TypeTag: Byte): U @storage[Long]
    def u(): U
    def u_=(x$1: U): Unit
    def u_J(val U_TypeTag: Byte): U @storage[Long]
    def u_J_=(val U_TypeTag: Byte,x$1: U @storage[Long]): Unit
  }
  // specialized class:
  class OhUh_J[Usp] extends OhUh[Usp] {
    def <init>(val miniboxing|tests|compile|OhUh_J|U_TypeTag: Byte,u: Usp @storage[Long]): miniboxing.tests.compile.OhUh_J[Usp] // is a specialized implementation of constructor OhUh
    def test(): Usp                                                        // is a forwarder to the specialized member
    def test_J(val U_TypeTag: Byte): Usp @storage[Long]                    // is a specialized implementation of method test
    def u(): Usp                                                           // is a forwarder to the specialized member
    def u_=(x$1: Usp): Unit                                                // is a forwarder to the specialized member
    def u_J(val U_TypeTag: Byte): Usp @storage[Long]                       // is a setter or getter for variable u
    def u_J_=(val U_TypeTag: Byte,x$1: Usp @storage[Long]): Unit           // is a setter or getter for variable u
    private[this] val miniboxing|tests|compile|OhUh_J|U_TypeTag: Byte      // is a type tag
    private[this] var u: Usp @storage[Long]                                // is a specialized implementation of variable u
  }
  // specialized class:
  class OhUh_L[Usp] extends OhUh[Usp] {
    def <init>(u: Usp): miniboxing.tests.compile.OhUh_L[Usp]               // is a specialized implementation of constructor OhUh
    def test(): Usp                                                        // is a specialized implementation of method test
    def test_J(val U_TypeTag: Byte): Usp @storage[Long]                    // is a forwarder to the specialized member
    def u(): Usp                                                           // is a setter or getter for variable u
    def u_=(x$1: Usp): Unit                                                // is a setter or getter for variable u
    def u_J(val U_TypeTag: Byte): Usp @storage[Long]                       // is a forwarder to the specialized member
    def u_J_=(val U_TypeTag: Byte,x$1: Usp @storage[Long]): Unit           // is a forwarder to the specialized member
    private[this] var u: Usp                                               // is a specialized implementation of variable u
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait UhOh[@miniboxed X, Y] extends Object {
    def foo(x: X, y: Y): X;
    def foo_J(X_TypeTag: Byte, x: Long, y: Y): Long
  };
  class UhOh_J[Xsp, Ysp] extends Object with miniboxing.tests.compile.UhOh[Xsp,Ysp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|UhOh_J|X_TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|UhOh_J|X_TypeTag: Byte): miniboxing.tests.compile.UhOh_J[Xsp,Ysp] = {
      UhOh_J.super.<init>();
      ()
    };
    def foo(x: Xsp, y: Ysp): Xsp = MiniboxConversions.this.minibox2box[Xsp](UhOh_J.this.foo_J(UhOh_J.this.miniboxing|tests|compile|UhOh_J|X_TypeTag, MiniboxConversions.this.box2minibox_tt[Xsp](x, UhOh_J.this.miniboxing|tests|compile|UhOh_J|X_TypeTag), y), UhOh_J.this.miniboxing|tests|compile|UhOh_J|X_TypeTag);
    def foo_J(X_TypeTag: Byte, x: Long, y: Ysp): Long = UhOh_J.this.foo_J(X_TypeTag, x, y)
  };
  class UhOh_L[Xsp, Ysp] extends Object with miniboxing.tests.compile.UhOh[Xsp,Ysp] {
    def <init>(): miniboxing.tests.compile.UhOh_L[Xsp,Ysp] = {
      UhOh_L.super.<init>();
      ()
    };
    def foo(x: Xsp, y: Ysp): Xsp = UhOh_L.this.foo(x, y);
    def foo_J(X_TypeTag: Byte, x: Long, y: Ysp): Long = MiniboxConversions.this.box2minibox_tt[Xsp](UhOh_L.this.foo(MiniboxConversions.this.minibox2box[Xsp](x, X_TypeTag), y), X_TypeTag)
  };
  abstract trait OhUh[@miniboxed U] extends Object {
    <accessor> <paramaccessor> def u(): U;
    <accessor> def u_J(U_TypeTag: Byte): Long;
    <accessor> <paramaccessor> def u_=(x$1: U): Unit;
    <accessor> def u_J_=(U_TypeTag: Byte, x$1: Long): Unit;
    def test(): U;
    def test_J(U_TypeTag: Byte): Long
  };
  class OhUh_J[Usp] extends Object with miniboxing.tests.compile.OhUh[Usp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|OhUh_J|U_TypeTag: Byte = _;
    <paramaccessor> private[this] var u: Long = _;
    <accessor> <paramaccessor> def u(): Usp = MiniboxConversions.this.minibox2box[Usp](OhUh_J.this.u_J(OhUh_J.this.miniboxing|tests|compile|OhUh_J|U_TypeTag), OhUh_J.this.miniboxing|tests|compile|OhUh_J|U_TypeTag);
    <accessor> def u_J(U_TypeTag: Byte): Long = OhUh_J.this.u;
    <accessor> <paramaccessor> def u_=(x$1: Usp): Unit = OhUh_J.this.u_J_=(OhUh_J.this.miniboxing|tests|compile|OhUh_J|U_TypeTag, MiniboxConversions.this.box2minibox_tt[Usp](x$1, OhUh_J.this.miniboxing|tests|compile|OhUh_J|U_TypeTag));
    <accessor> def u_J_=(U_TypeTag: Byte, x$1: Long): Unit = OhUh_J.this.u = x$1;
    def <init>(miniboxing|tests|compile|OhUh_J|U_TypeTag: Byte, u: Long): miniboxing.tests.compile.OhUh_J[Usp] = {
      OhUh_J.super.<init>();
      ()
    };
    def test(): Usp = MiniboxConversions.this.minibox2box[Usp](OhUh_J.this.test_J(OhUh_J.this.miniboxing|tests|compile|OhUh_J|U_TypeTag), OhUh_J.this.miniboxing|tests|compile|OhUh_J|U_TypeTag);
    def test_J(U_TypeTag: Byte): Long = {
      val tr: miniboxing.tests.compile.UhOh[Usp,Int] = new miniboxing.tests.compile.UhOh_J[Usp,Int](U_TypeTag);
      tr.foo_J(U_TypeTag, OhUh_J.this.u_J(U_TypeTag), 3)
    }
  };
  class OhUh_L[Usp] extends Object with miniboxing.tests.compile.OhUh[Usp] {
    <paramaccessor> private[this] var u: Usp = _;
    <accessor> <paramaccessor> def u(): Usp = OhUh_L.this.u;
    <accessor> def u_J(U_TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Usp](OhUh_L.this.u(), U_TypeTag);
    <accessor> <paramaccessor> def u_=(x$1: Usp): Unit = OhUh_L.this.u = x$1;
    <accessor> def u_J_=(U_TypeTag: Byte, x$1: Long): Unit = OhUh_L.this.u_=(MiniboxConversions.this.minibox2box[Usp](x$1, U_TypeTag));
    def <init>(u: Usp): miniboxing.tests.compile.OhUh_L[Usp] = {
      OhUh_L.super.<init>();
      ()
    };
    def test(): Usp = {
      val tr: miniboxing.tests.compile.UhOh[Usp,Int] = new miniboxing.tests.compile.UhOh_L[Usp,Int]();
      tr.foo(OhUh_L.this.u(), 3)
    };
    def test_J(U_TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Usp](OhUh_L.this.test(), U_TypeTag)
  }
}
[Now checking: minibox-commit]