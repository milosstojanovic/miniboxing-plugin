Specializing class C...
  // interface:
  abstract trait C[T] extends Object {
    def u(): T
    def u_J(val T_TypeTag: Byte): T @storage[Long]
    def x(): T
    def x_=(x$1: T): Unit
    def x_J(val T_TypeTag: Byte): T @storage[Long]
    def x_J_=(val T_TypeTag: Byte,x$1: T @storage[Long]): Unit
    def y(arg: T): T
    def y_J(val T_TypeTag: Byte,arg: T @storage[Long]): T @storage[Long]
    def z(arg1: T,arg2: List[T]): T
    def z_J(val T_TypeTag: Byte,arg1: T @storage[Long],arg2: List[T]): T @storage[Long]
  }
  // specialized class:
  class C_J[Tsp] extends C[Tsp] {
    def <init>(val C_J|T_TypeTag: Byte,x: Tsp @storage[Long]): C_J[Tsp]    // is a specialized implementation of constructor C
    def u(): Tsp                                                           // is a forwarder to the specialized member
    def u_J(val T_TypeTag: Byte): Tsp @storage[Long]                       // is a specialized implementation of method u
    def x(): Tsp                                                           // is a forwarder to the specialized member
    def x_=(x$1: Tsp): Unit                                                // is a forwarder to the specialized member
    def x_J(val T_TypeTag: Byte): Tsp @storage[Long]                       // is a setter or getter for variable x
    def x_J_=(val T_TypeTag: Byte,x$1: Tsp @storage[Long]): Unit           // is a setter or getter for variable x
    def y(arg: Tsp): Tsp                                                   // is a forwarder to the specialized member
    def y_J(val T_TypeTag: Byte,arg: Tsp @storage[Long]): Tsp @storage[Long] // is a specialized implementation of method y
    def z(arg1: Tsp,arg2: List[Tsp]): Tsp                                  // is a forwarder to the specialized member
    def z_J(val T_TypeTag: Byte,arg1: Tsp @storage[Long],arg2: List[Tsp]): Tsp @storage[Long] // is a specialized implementation of method z
    private[this] val C_J|T_TypeTag: Byte                                  // is a type tag
    private[this] var x: Tsp @storage[Long]                                // is a specialized implementation of variable x
  }
  // specialized class:
  class C_L[Tsp] extends C[Tsp] {
    def <init>(x: Tsp): C_L[Tsp]                                           // is a specialized implementation of constructor C
    def u(): Tsp                                                           // is a specialized implementation of method u
    def u_J(val T_TypeTag: Byte): Tsp @storage[Long]                       // is a forwarder to the specialized member
    def x(): Tsp                                                           // is a setter or getter for variable x
    def x_=(x$1: Tsp): Unit                                                // is a setter or getter for variable x
    def x_J(val T_TypeTag: Byte): Tsp @storage[Long]                       // is a forwarder to the specialized member
    def x_J_=(val T_TypeTag: Byte,x$1: Tsp @storage[Long]): Unit           // is a forwarder to the specialized member
    def y(arg: Tsp): Tsp                                                   // is a specialized implementation of method y
    def y_J(val T_TypeTag: Byte,arg: Tsp @storage[Long]): Tsp @storage[Long] // is a forwarder to the specialized member
    def z(arg1: Tsp,arg2: List[Tsp]): Tsp                                  // is a specialized implementation of method z
    def z_J(val T_TypeTag: Byte,arg1: Tsp @storage[Long],arg2: List[Tsp]): Tsp @storage[Long] // is a forwarder to the specialized member
    private[this] var x: Tsp                                               // is a specialized implementation of variable x
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
[Now checking: minibox-commit]